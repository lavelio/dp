{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-react/./src/taskpane/components/DialogForm.tsx","webpack://office-addin-taskpane-react/./helpers.ts","webpack://office-addin-taskpane-react/./src/taskpane/components/TabAnswer.tsx","webpack://office-addin-taskpane-react/./src/taskpane/taskpane.ts","webpack://office-addin-taskpane-react/./src/taskpane/components/TabSettings.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/TabPanes.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/App.tsx","webpack://office-addin-taskpane-react/./src/taskpane/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Parser from \"html-react-parser\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogBody,\n  DialogContent,\n  DialogSurface,\n  DialogTitle,\n  DialogTrigger,\n  makeStyles,\n} from \"@fluentui/react-components\";\n\nexport interface DialogFormProps {\n  type: \"non-modal\" | \"modal\" | \"alert\";\n  title: string;\n  content: string;\n  closeName: string;\n  showPrimary: boolean;\n  onResultDialog: (result: \"ok\" | \"cancel\") => void;\n}\n\nconst useStyles = makeStyles({\n  dialog: {\n    marginTop: \"10px\",\n    marginRight: \"10px\",\n    marginLeft: \"10px\",\n  },\n  dialog_apply: {\n    backgroundColor: \"red\",\n  },\n});\n\nconst DialogForm = (props: DialogFormProps) => {\n  const styles = useStyles();\n\n  // button - confirm\n  const onButtonApplyClick = () => {\n    props.onResultDialog(\"ok\");\n  };\n\n  // button - cancel\n  const onOpenChange = () => {\n    props.onResultDialog(\"cancel\");\n  };\n\n  return (\n    <Dialog modalType={props.type} defaultOpen={true} onOpenChange={onOpenChange}>\n      <DialogSurface className={styles.dialog}>\n        <DialogBody>\n          <DialogTitle>{props.title}</DialogTitle>\n\n          <DialogContent>{Parser(props.content)}</DialogContent>\n\n          <DialogActions>\n            <DialogTrigger disableButtonEnhancement>\n              <Button appearance=\"secondary\" autoFocus>\n                {props.closeName}\n              </Button>\n            </DialogTrigger>\n            {props.showPrimary && (\n              <Button appearance=\"primary\" className={styles.dialog_apply} onClick={onButtonApplyClick}>\n                LÃ¶schen\n              </Button>\n            )}\n          </DialogActions>\n        </DialogBody>\n      </DialogSurface>\n    </Dialog>\n  );\n};\n\nexport default DialogForm;\n","// helper functions & parameters\n\n/* global console fetch */\n\nconst Host = \"https://fg.server.lavel.io\";\n\nexport interface DialogInfo {\n  show: boolean;\n  text: string;\n}\n\nexport interface FieldInfo {\n  current: string;\n  state: \"none\" | \"error\" | \"warning\" | \"success\" | undefined;\n}\n\n// send Request to API\nexport async function sendRequest(\n  endpoint: string,\n  apiKey: string,\n  subject: string,\n  sender: string,\n  body: string,\n  user_input: string,\n  user_email: string,\n  recipients: string[] = [],\n  cc: string[] = []\n): Promise<any> {\n  var url = Host + endpoint;\n  console.log(` sendRequest to: ${url}`);\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    authorization: apiKey,\n  };\n\n  const data = {\n    messages: [\n      {\n        subject: subject,\n        body: body,\n        sender: sender,\n        recipients: recipients,\n        cc: cc,\n        thread_body: body,\n        raw_content: null\n      },\n    ],\n    user_input: user_input,\n    target_language: \"german\",\n    user_email: user_email,\n  };\n\n  console.log(\"data = \" + JSON.stringify(data, null, 2));\n\n  var options = {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(data),\n    muteHttpExceptions: true,\n  };\n\n  // HTTP request\n  var response = await fetch(url, options);\n\n  if (![200, 400, 401, 404, 502].includes(response.status)) {\n    console.log(`Wrong response code: ${response.status}`);\n    return { detail: `Wrong response code: ${response.status}` };\n  }\n\n  try {\n    let data: any = await response.json();\n    console.log(\"data: \" + JSON.stringify(data, null, 2));\n    return data;\n  } catch (error) {\n    console.log(`Invalid JSON: ${error}`);\n    return { detail: `Invalid JSON: ${error}` };\n  }\n}\n","import * as React from \"react\";\nimport { Button, Dialog, DialogSurface, Field, InfoLabel, Label, LabelProps, Spinner, Textarea, makeStyles } from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo, FieldInfo, sendRequest } from \"../../../helpers\";\nimport { getMailDetails, insertText } from \"../taskpane\";\nimport { Pencil } from \"lucide-react\";\n\n/* global console, HTMLTextAreaElement, localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  answer_dialog: {\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n  dialog_field: {\n    fontWeight: 600,\n    marginBottom: \"15px\",\n  },\n  button_send: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n  spinner: {\n    width: \"75%\",\n  },\n  pencil: {\n    marginLeft: \"2px\",\n    marginRight: \"4px\",\n  },\n});\n\nconst TabAnswer = () => {\n  const styles = useStyles();\n\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" }); // dialog form\n  const [showSpinner, setShowSpinner] = React.useState<boolean>(false); // spinner\n\n  const [answerValue, setAnswerValue] = React.useState<FieldInfo>({ current: \"\", state: \"none\" }); // answer field value\n\n  const def_answer =\n    \"Eingeben..\";\n\n  React.useEffect(() => {\n    const getStartData = async () => {\n      var answer = localStorage.getItem(\"answer\"); // load last answer from storage\n\n      // set default value\n      if (!answer || answer == \"\") {\n        answer = def_answer;\n      }\n\n      setAnswerValue({ current: answer, state: \"none\" });\n    };\n\n    getStartData(); // get Start Data\n  }, []);\n\n  // validate answer field\n  const ValidateField = (): boolean => {\n    let valid = true;\n    var answer = answerValue.current ?? \"\";\n\n    // set default value\n    if (answer == \" \") {\n      answer = def_answer;\n      localStorage.setItem(\"answer\", answer); // save\n    }\n\n    answer = answer.trim();\n\n    if (answer == \"\") {\n      setAnswerValue({ current: answer, state: \"error\" });\n      valid = false;\n    } else {\n      setAnswerValue({ current: answer, state: \"none\" });\n    }\n\n    return valid;\n  };\n\n  // change answer value\n  const handleChangeValue = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setAnswerValue({ ...answerValue, current: event.target.value });\n  };\n\n  // button - get full answer\n  const onButtonSaveClick = () => {\n    if (!ValidateField()) {\n      return;\n    }\n\n    localStorage.setItem(\"answer\", answerValue.current); // save\n\n    var apiKey: string = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n\n    if (apiKey == \"\") {\n      setShowDialog({ show: true, text: \"API-SchlÃ¼ssel nicht angegeben\" });\n      return;\n    }\n\n    // get Mail Details\n    getMailDetails((data) => {\n      setShowSpinner(true);\n\n      var user_input: string = answerValue.current;\n\n      console.log(\"subject = \" + data.subject);\n      console.log(\"sender = \" + data.sender);\n      console.log(\"body = \" + data.body);\n      console.log(\"recipients = \" + JSON.stringify(data.recipients));\n      console.log(\"cc = \" + JSON.stringify(data.cc));\n      console.log(\"user_input = \" + user_input);\n      console.log(\"user_email = \" + data.user_email);\n\n      // send Request\n      sendRequest(\"/outlook/generate-email\", apiKey, data.subject, data.sender, data.body, user_input, data.user_email, data.recipients, data.cc)\n        .then(async (response) => {\n          setShowSpinner(false);\n\n          console.log(\"response = \" + JSON.stringify(response, null, 2));\n\n          // show error dialog\n          if (response.status != \"success\") {\n            setShowDialog({ show: true, text: response.detail });\n            return;\n          }\n\n          insertText(response.email_text); // Write text to the cursor point in the compose surface.\n        })\n        .catch((error) => {\n          setShowSpinner(false);\n          setShowDialog({ show: true, text: `Request error: ${error}` }); // show error dialog\n        });\n    });\n  };\n\n  // result dialog event\n  const handleResultDialog = () => {\n    setShowSpinner(false);\n    setShowDialog({ ...showDialog, show: false });\n  };\n\n  return (\n    <div className={styles.root} role=\"tabpanel\" aria-labelledby=\"Settings\">\n      {showSpinner && (\n        <Dialog defaultOpen={true}>\n          <DialogSurface className={styles.spinner}>\n            <Spinner autoFocus labelPosition=\"after\" label=\"Loading...\" />\n          </DialogSurface>\n        </Dialog>\n      )}\n\n      {showDialog.show && (\n        <DialogForm\n          type=\"alert\"\n          title=\"Fehler\"\n          content={showDialog.text}\n          closeName=\"OK\"\n          showPrimary={false}\n          onResultDialog={handleResultDialog}\n        />\n      )}\n\n      <div className={styles.answer_dialog}>\n        <Field\n          className={styles.dialog_field}\n          label={\n            <>\n              <Pencil size={18} className={styles.pencil} /> Nutzer Input\n            </>\n          }\n          validationState={answerValue.state}\n          validationMessage=\"Kurze Antwort eingeben\"\n          required\n        >\n          <Textarea\n            value={answerValue.current}\n            rows={10}\n            placeholder=\"Kurzen Text eingeben..\"\n            size=\"large\"\n            resize=\"vertical\"\n            onChange={handleChangeValue}\n          />\n        </Field>\n\n        <Button className={styles.button_send} appearance=\"primary\" onClick={onButtonSaveClick}>\n          Antwort generieren\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TabAnswer;\n","/* global Office console */\n\n// Write text to the cursor point in the compose surface.\nexport async function insertText(text: string) {\n  try {\n    Office.context.mailbox.item?.body.setSelectedDataAsync(\n      text,\n      { coercionType: Office.CoercionType.Text },\n      (asyncResult: Office.AsyncResult<void>) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          throw asyncResult.error.message;\n        }\n      }\n    );\n  } catch (error) {\n    console.log(\"Error: \" + error);\n  }\n}\n\n// get Mail Details\nexport async function getMailDetails(\n  callback: (data: { \n    subject: string; \n    sender: string; \n    body: string; \n    user_email: string;\n    recipients: string[];\n    cc: string[];\n  }) => void\n) {\n  console.log(\"getMailDetails\");\n\n  Office.context.mailbox.item.subject.getAsync((subjectResult) => {\n    if (subjectResult.status === Office.AsyncResultStatus.Failed) {\n      console.error(\"Failed to get subject:\", subjectResult.error.message);\n      return;\n    }\n\n    const subject = subjectResult.value;\n\n    Office.context.mailbox.item.from.getAsync((fromResult) => {\n      if (fromResult.status === Office.AsyncResultStatus.Failed) {\n        console.error(\"Failed to get sender:\", fromResult.error.message);\n        return;\n      }\n\n      const sender = fromResult.value.emailAddress;\n      const user_email = sender;\n\n      Office.context.mailbox.item.to.getAsync((toResult) => {\n        if (toResult.status === Office.AsyncResultStatus.Failed) {\n          console.error(\"Failed to get recipients:\", toResult.error.message);\n          return;\n        }\n\n        const recipients = toResult.value.map((recipient) => recipient.emailAddress);\n\n        Office.context.mailbox.item.cc.getAsync((ccResult) => {\n          if (ccResult.status === Office.AsyncResultStatus.Failed) {\n            console.error(\"Failed to get CC:\", ccResult.error.message);\n            return;\n          }\n\n          const cc = ccResult.value.map((recipient) => recipient.emailAddress);\n\n          Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, (bodyResult) => {\n            if (bodyResult.status === Office.AsyncResultStatus.Failed) {\n              console.error(\"Failed to get body:\", bodyResult.error.message);\n              return;\n            }\n\n            const body = bodyResult.value;\n\n            callback({ subject, sender, body, user_email, recipients, cc });\n          });\n        });\n      });\n    });\n  });\n}\n","import * as React from \"react\";\nimport { Button, Field, Input, makeStyles } from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo, FieldInfo } from \"../../../helpers\";\n\n/* global HTMLInputElement, localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  saving_dialog: {\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n  dialog_field: {\n    fontWeight: 600,\n    marginBottom: \"15px\",\n  },\n  dialog_add: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n});\n\nconst TabSettings = () => {\n  const styles = useStyles();\n\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" }); // dialog form\n  const [keyValue, setKeyValue] = React.useState<FieldInfo>({ current: \"\", state: \"none\" }); // apiKey field value\n\n  React.useEffect(() => {\n    const getStartData = async () => {\n      var apiKey = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n      setKeyValue({ current: apiKey, state: \"none\" });\n    };\n\n    getStartData(); // get Start Data\n  }, []);\n\n  // validate field\n  const ValidateField = (): boolean => {\n    let valid = true;\n    var apiKey = keyValue.current.trim();\n    setKeyValue({ ...keyValue, current: apiKey, state: \"none\" });\n    return valid;\n  };\n\n  // change input value\n  const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setKeyValue({ ...keyValue, current: event.target.value });\n  };\n\n  // button - save api key\n  const onButtonSaveClick = () => {\n    if (!ValidateField()) {\n      return;\n    }\n\n    localStorage.setItem(\"apiKey\", keyValue.current); // save\n\n    setShowDialog({ show: true, text: \"Ãnderungen gespeichert\" });\n  };\n\n  // result dialog event\n  const handleResultDialog = () => {\n    setShowDialog({ ...showDialog, show: false });\n  };\n\n  return (\n    <div className={styles.root} role=\"tabpanel\" aria-labelledby=\"Settings\">\n      {showDialog.show && (\n        <DialogForm\n          type=\"modal\"\n          title=\"Info\"\n          content={showDialog.text}\n          closeName=\"OK\"\n          showPrimary={false}\n          onResultDialog={handleResultDialog}\n        />\n      )}\n\n      <div className={styles.saving_dialog}>\n        <Field\n          className={styles.dialog_field}\n          label=\"API-SchlÃ¼sselwert\"\n          validationState={keyValue.state}\n          validationMessage=\"Kopieren Sie Ihren API-SchlÃ¼sselwert und fÃ¼gen Sie ihn ein\"\n          required\n        >\n          <Input value={keyValue.current} placeholder=\"z.b. outlookapi47eda17f38081e...\" onChange={handleChangeValue} />\n        </Field>\n\n        <Button className={styles.dialog_add} appearance=\"primary\" onClick={onButtonSaveClick}>\n          Speichern\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TabSettings;\n","import * as React from \"react\";\nimport { makeStyles, Tab, TabList } from \"@fluentui/react-components\";\nimport type { SelectTabData, SelectTabEvent, TabValue } from \"@fluentui/react-components\";\nimport TabAnswer from \"./TabAnswer\";\nimport TabSettings from \"./TabSettings\";\n\n\n/* global localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    alignItems: \"flex-start\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    paddingTop: \"10px\",\n    paddingLeft: \"1px\",\n    paddingRight: \"1px\",\n  },\n  tab_menu: {\n    paddingBottom: \"20px\",\n  },\n  tab_cont: {\n    width: \"100%\",\n  },\n});\n\nexport const TabPanes = () => {\n  const styles = useStyles();\n\n  var apiKey = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n\n  const [selectedTab, setSelectedTab] = React.useState<TabValue>(apiKey == \"\" ? \"settings\" : \"answer\");\n\n  const onTabSelect = (_event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedTab(data.value);\n  };\n\n  return (\n    <div className={styles.root}>\n      <TabList className={styles.tab_menu} selectedValue={selectedTab} onTabSelect={onTabSelect}>\n        <Tab id=\"Answer\" value=\"answer\">\n          Antwort\n        </Tab>\n\n        <Tab id=\"Settings\" value=\"settings\">\n          Einstellungen\n        </Tab>\n      </TabList>\n\n      <div className={styles.tab_cont}>\n        {selectedTab === \"answer\" && <TabAnswer />}\n\n        {selectedTab === \"settings\" && <TabSettings />}\n      </div>\n    </div>\n  );\n};\n\nexport default TabPanes;\n","import * as React from \"react\";\nimport { Divider, makeStyles } from \"@fluentui/react-components\";\nimport { TabPanes } from \"./TabPanes\";\n\n/* global */\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"100vh\",\n    maxWidth: \"370px\",\n  },\n  divider: {\n    marginTop: \"10px\",\n  },\n});\n\nconst App = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <TabPanes />\n      <Divider className={styles.divider} inset />\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./components/App\";\nimport { createLightTheme, FluentProvider } from \"@fluentui/react-components\";\nimport type { BrandVariants, Theme } from \"@fluentui/react-components\";\n\n/* global document, Office, module, require, HTMLElement */\n\n// themes designer: https://react.fluentui.dev/?path=/docs/theme-theme-designer--docs\nconst outlook: BrandVariants = {\n  10: \"#010101\",\n  20: \"#010202\",\n  30: \"#010403\",\n  40: \"#0D1C17\",\n  50: \"#0F2F25\",\n  60: \"#0E3D30\",\n  70: \"#094B3A\",\n  80: \"#005B46\",\n  90: \"#216753\",\n  100: \"#377461\",\n  110: \"#4B816F\",\n  120: \"#5F8E7D\",\n  130: \"#729B8C\",\n  140: \"#85A99C\",\n  150: \"#98B7AB\",\n  160: \"#ACC4BB\",\n};\n\nconst customTheme: Theme = {\n  ...createLightTheme(outlook),\n};\n\nconst rootElement: HTMLElement | null = document.getElementById(\"container\");\nconst root = rootElement ? createRoot(rootElement) : undefined;\n\nOffice.onReady(() => {\n  root?.render(\n    <FluentProvider theme={customTheme}>\n      <App />\n    </FluentProvider>\n  );\n});\n\nif ((module as any).hot) {\n  (module as any).hot.accept(\"./components/App\", () => {\n    const NextApp = require(\"./components/App\").default;\n    root?.render(NextApp);\n  });\n}\n"],"names":["useStyles","dialog","marginTop","marginRight","marginLeft","dialog_apply","backgroundColor","props","styles","Dialog","modalType","type","defaultOpen","onOpenChange","onResultDialog","DialogSurface","className","DialogBody","DialogTitle","title","DialogContent","content","DialogActions","DialogTrigger","disableButtonEnhancement","Button","appearance","autoFocus","closeName","showPrimary","onClick","sendRequest","endpoint","apiKey","subject","sender","body","user_input","user_email","recipients","cc","url","data","messages","thread_body","raw_content","target_language","options","method","headers","authorization","JSON","stringify","muteHttpExceptions","response","fetch","includes","status","detail","json","error","root","flexDirection","display","paddingLeft","paddingRight","answer_dialog","dialog_field","fontWeight","marginBottom","button_send","width","spinner","pencil","showDialog","setShowDialog","show","text","showSpinner","setShowSpinner","answerValue","setAnswerValue","current","state","def_answer","answer","localStorage","getItem","role","Spinner","labelPosition","label","Field","size","validationState","validationMessage","required","Textarea","T","value","rows","placeholder","resize","onChange","event","target","valid","setItem","trim","ValidateField","callback","Office","context","mailbox","item","getAsync","subjectResult","AsyncResultStatus","Failed","from","fromResult","emailAddress","to","toResult","map","recipient","ccResult","CoercionType","Text","bodyResult","getMailDetails","then","setSelectedDataAsync","coercionType","asyncResult","message","insertText","email_text","catch","saving_dialog","dialog_add","keyValue","setKeyValue","Input","alignItems","justifyContent","paddingTop","tab_menu","paddingBottom","tab_cont","TabPanes","selectedTab","setSelectedTab","TabList","selectedValue","onTabSelect","_event","Tab","id","minHeight","maxWidth","divider","Divider","inset","customTheme","createLightTheme","rootElement","document","getElementById","onReady","render","FluentProvider","theme"],"sourceRoot":""}