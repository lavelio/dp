{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-react/./src/taskpane/components/DialogForm.tsx","webpack://office-addin-taskpane-react/./helpers.ts","webpack://office-addin-taskpane-react/./src/taskpane/taskpane.ts","webpack://office-addin-taskpane-react/./src/taskpane/components/TabAnswer.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/TabSettings.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/TabActivity.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/TabPanes.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/App.tsx","webpack://office-addin-taskpane-react/./src/taskpane/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Parser from \"html-react-parser\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogBody,\n  DialogContent,\n  DialogSurface,\n  DialogTitle,\n  DialogTrigger,\n  makeStyles,\n} from \"@fluentui/react-components\";\n\nexport interface DialogFormProps {\n  type: \"non-modal\" | \"modal\" | \"alert\";\n  title: string;\n  content: string;\n  closeName: string;\n  showPrimary: boolean;\n  onResultDialog: (result: \"ok\" | \"cancel\") => void;\n}\n\nconst useStyles = makeStyles({\n  dialog: {\n    marginTop: \"10px\",\n    marginRight: \"10px\",\n    marginLeft: \"10px\",\n  },\n  dialog_apply: {\n    backgroundColor: \"red\",\n  },\n});\n\nconst DialogForm = (props: DialogFormProps) => {\n  const styles = useStyles();\n\n  // button - confirm\n  const onButtonApplyClick = () => {\n    props.onResultDialog(\"ok\");\n  };\n\n  // button - cancel\n  const onOpenChange = () => {\n    props.onResultDialog(\"cancel\");\n  };\n\n  return (\n    <Dialog modalType={props.type} defaultOpen={true} onOpenChange={onOpenChange}>\n      <DialogSurface className={styles.dialog}>\n        <DialogBody>\n          <DialogTitle>{props.title}</DialogTitle>\n\n          <DialogContent>{Parser(props.content)}</DialogContent>\n\n          <DialogActions>\n            <DialogTrigger disableButtonEnhancement>\n              <Button appearance=\"secondary\" autoFocus>\n                {props.closeName}\n              </Button>\n            </DialogTrigger>\n            {props.showPrimary && (\n              <Button appearance=\"primary\" className={styles.dialog_apply} onClick={onButtonApplyClick}>\n                Löschen\n              </Button>\n            )}\n          </DialogActions>\n        </DialogBody>\n      </DialogSurface>\n    </Dialog>\n  );\n};\n\nexport default DialogForm;\n","/* global console, fetch */\n\nexport interface DialogInfo {\n  show: boolean;\n  text: string;\n}\n\nexport interface FieldInfo {\n  current: string;\n  state: string;\n}\n\nexport interface DocumentText {\n  filename: string;\n  text: string;\n}\n\n// Function to send request to the backend\nexport const sendRequest = async (\n  endpoint: string,\n  apiKey: string,\n  subject: string,\n  sender: string,\n  body: string,\n  user_input: string,\n  user_email: string,\n  recipients: string[],\n  cc: string[],\n  files?: File[],\n  documents?: DocumentText[],\n  generateType: string = \"email\",\n  includeEmail: boolean = true\n): Promise<any> => {\n  try {\n    // Determine which endpoint to use based on generateType\n    const targetEndpoint = generateType === \"email\" ? \"/outlook/generate-email\" : \"/outlook/generate-content\";\n\n    // Create the request body\n    const requestBody: any = {\n      user_input: user_input,\n      user_email: user_email,\n      messages: [\n        {\n          subject: subject, // Include subject in the message object\n          sender: sender,\n          body: body,\n          recipients: recipients,\n          cc: cc,\n        },\n      ],\n    };\n\n    // Add documents if available\n    if (documents && documents.length > 0) {\n      requestBody.documents = documents;\n    }\n\n    // Add includeEmail flag for generate-content endpoint\n    if (generateType === \"content\") {\n      requestBody.include_email = includeEmail;\n    }\n\n    // Set the API URL\n    const apiUrl = \"https://fg.server.lavel.io\" + targetEndpoint;\n\n    // Send the request\n    const response = await fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: apiKey,\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    // Parse the response\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error in sendRequest:\", error);\n    throw error;\n  }\n};\n","/* global Office console */\n\n// Write text to the cursor point in the compose surface.\nexport async function insertText(text: string) {\n  try {\n    Office.context.mailbox.item?.body.setSelectedDataAsync(\n      text,\n      { coercionType: Office.CoercionType.Text },\n      (asyncResult: Office.AsyncResult<void>) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          throw asyncResult.error.message;\n        }\n      }\n    );\n  } catch (error) {\n    console.log(\"Error: \" + error);\n  }\n}\n\n// get Mail Details\nexport async function getMailDetails(\n  callback: (data: { \n    subject: string; \n    sender: string; \n    body: string; \n    user_email: string;\n    recipients: string[];\n    cc: string[];\n  }) => void\n) {\n  console.log(\"getMailDetails\");\n\n  Office.context.mailbox.item.subject.getAsync((subjectResult) => {\n    if (subjectResult.status === Office.AsyncResultStatus.Failed) {\n      console.error(\"Failed to get subject:\", subjectResult.error.message);\n      return;\n    }\n\n    const subject = subjectResult.value;\n\n    Office.context.mailbox.item.from.getAsync((fromResult) => {\n      if (fromResult.status === Office.AsyncResultStatus.Failed) {\n        console.error(\"Failed to get sender:\", fromResult.error.message);\n        return;\n      }\n\n      const sender = fromResult.value.emailAddress;\n      const user_email = sender;\n\n      Office.context.mailbox.item.to.getAsync((toResult) => {\n        if (toResult.status === Office.AsyncResultStatus.Failed) {\n          console.error(\"Failed to get recipients:\", toResult.error.message);\n          return;\n        }\n\n        const recipients = toResult.value.map((recipient) => recipient.emailAddress);\n\n        Office.context.mailbox.item.cc.getAsync((ccResult) => {\n          if (ccResult.status === Office.AsyncResultStatus.Failed) {\n            console.error(\"Failed to get CC:\", ccResult.error.message);\n            return;\n          }\n\n          const cc = ccResult.value.map((recipient) => recipient.emailAddress);\n\n          Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, (bodyResult) => {\n            if (bodyResult.status === Office.AsyncResultStatus.Failed) {\n              console.error(\"Failed to get body:\", bodyResult.error.message);\n              return;\n            }\n\n            const body = bodyResult.value;\n\n            callback({ subject, sender, body, user_email, recipients, cc });\n          });\n        });\n      });\n    });\n  });\n}\n","import * as React from \"react\";\nimport { \n  Button, \n  Dialog, \n  DialogSurface, \n  Field, \n  InfoLabel, \n  Label, \n  LabelProps, \n  Spinner, \n  Textarea, \n  makeStyles,\n  Badge,\n  Text,\n  Divider,\n  Toast,\n  ToastTitle,\n  useToastController,\n  Toaster,\n  Checkbox,\n  Tooltip\n} from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo, FieldInfo, sendRequest } from \"../../../helpers\";\nimport { getMailDetails, insertText } from \"../taskpane\";\nimport { Pencil, FileText, X, Upload, CheckCircle2, Copy, Mail, Settings } from \"lucide-react\";\n\n/* global console, HTMLTextAreaElement, HTMLDivElement, localStorage, File, fetch, document */\n\n// API Configuration\nconst BUCKET_NAME = \"fg-chat-ocr\";\nconst OCR_API_ENDPOINT = \"https://fg.server.lavel.io/outlook/ocr-detect\";\nconst PRESIGNED_URL_ENDPOINT = \"https://fg.server.lavel.io/generate_presigned_upload_url\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    padding: \"0 10px\",\n    width: \"100%\",\n    boxSizing: \"border-box\",\n  },\n  answer_dialog: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n  },\n  dialog_field: {\n    fontWeight: 600,\n    marginBottom: \"15px\",\n  },\n  button_send: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n  spinner: {\n    width: \"75%\",\n  },\n  customLoadingOverlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(255, 255, 255, 0.8)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    zIndex: 9999,\n  },\n  toggleContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    marginBottom: \"15px\",\n    padding: \"0\",\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n  },\n  toggleGroupContainer: {\n    display: \"flex\",\n    width: \"100%\",\n    boxSizing: \"border-box\",\n    overflow: \"hidden\",\n  },\n  toggleButton: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: \"10px 15px\",\n    border: \"1px solid #e0e0e0\",\n    backgroundColor: \"#f5f5f5\",\n    cursor: \"pointer\",\n    flex: 1,\n    transition: \"all 0.2s ease\",\n    fontWeight: 400,\n    fontSize: \"14px\",\n    userSelect: \"none\",\n  },\n  toggleButtonLeft: {\n    borderRadius: \"4px 0 0 4px\",\n    borderRight: \"none\",\n  },\n  toggleButtonRight: {\n    borderRadius: \"0 4px 4px 0\",\n  },\n  toggleButtonActive: {\n    backgroundColor: \"#006d5c\",\n    color: \"white\",\n    fontWeight: 600,\n  },\n  toggleButtonInactive: {\n    opacity: 0.9,\n  },\n  toggleIcon: {\n    marginRight: \"8px\",\n    verticalAlign: \"middle\",\n  },\n  checkboxContainer: {\n    marginTop: \"5px\",\n    marginBottom: \"15px\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    marginTop: \"10px\",\n    fontSize: \"14px\",\n    fontWeight: 600,\n  },\n  pencil: {\n    marginLeft: \"2px\",\n    marginRight: \"4px\",\n  },\n  dropZone: {\n    border: \"2px dashed #ccc\",\n    borderRadius: \"4px\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    marginBottom: \"15px\",\n    cursor: \"pointer\",\n    transition: \"all 0.3s ease\",\n  },\n  dropZoneActive: {\n    border: \"2px dashed #0078d4\",\n    backgroundColor: \"rgba(0, 120, 212, 0.05)\",\n  },\n  dropZoneSuccess: {\n    border: \"2px dashed #107c10\",\n    backgroundColor: \"rgba(16, 124, 16, 0.05)\",\n  },\n  filePreview: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"8px 12px\",\n    backgroundColor: \"#f3f2f1\",\n    borderRadius: \"4px\",\n    marginBottom: \"15px\",\n  },\n  fileIcon: {\n    marginRight: \"8px\",\n    color: \"#0078d4\",\n  },\n  fileName: {\n    flex: 1,\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n  },\n  removeButton: {\n    cursor: \"pointer\",\n    color: \"#605e5c\",\n    \"&:hover\": {\n      color: \"#d13438\",\n    },\n  },\n  copyButton: {\n    cursor: \"pointer\",\n    color: \"#605e5c\",\n    marginRight: \"8px\",\n    \"&:hover\": {\n      color: \"#0078d4\",\n    },\n  },\n  divider: {\n    margin: \"15px 0\",\n  },\n  fileUploadInfo: {\n    marginBottom: \"10px\",\n    fontSize: \"12px\",\n    color: \"#605e5c\",\n  },\n  ocrCompletedMessage: {\n    color: \"green\",\n    display: \"block\",\n    marginTop: \"5px\",\n  },\n  checkIcon: {\n    verticalAlign: \"middle\",\n    marginRight: \"5px\",\n  },\n  hiddenInput: {\n    display: \"none\",\n  }\n});\n\nconst TabAnswer = () => {\n  const styles = useStyles();\n\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" }); // dialog form\n  const [showSpinner, setShowSpinner] = React.useState<boolean>(false); // spinner\n  const [showCustomLoading, setShowCustomLoading] = React.useState<boolean>(false); // custom loading overlay\n\n  const [answerValue, setAnswerValue] = React.useState<FieldInfo>({ current: \"\", state: \"none\" }); // answer field value\n  // Store OCR results for each document separately\n  const [documentTexts, setDocumentTexts] = React.useState<{[key: string]: string}>({});\n  // Combined text input for all documents - used for display and answer generation\n  const [textInput, setTextInput] = React.useState<string>(\"\");\n  const [isDragging, setIsDragging] = React.useState<boolean>(false);\n  const [uploadedFiles, setUploadedFiles] = React.useState<File[]>([]);\n  const [isUploading, setIsUploading] = React.useState<boolean>(false);\n  const [isOcrProcessing, setIsOcrProcessing] = React.useState<boolean>(false);\n  const [ocrCompleted, setOcrCompleted] = React.useState<boolean>(false);\n  // Track file names for OCR processing - used in the processOCR function\n  const [fileNames, setFileNames] = React.useState<string[]>([]);\n  \n  // New state for the generate type toggle (email or content)\n  const [generateType, setGenerateType] = React.useState<string>(\"email\"); // Default to \"email\"\n  // New state for the include email checkbox\n  const [includeEmail, setIncludeEmail] = React.useState<boolean>(true); // Default to true\n\n  const dropZoneRef = React.useRef<HTMLDivElement>(null);\n  const { dispatchToast } = useToastController();\n\n  const def_answer = \"Eingeben..\";\n\n  React.useEffect(() => {\n    const getStartData = async () => {\n      var answer = localStorage.getItem(\"answer\"); // load last answer from storage\n\n      // set default value\n      if (!answer || answer == \"\") {\n        answer = def_answer;\n      }\n\n      setAnswerValue({ current: answer, state: \"none\" });\n      \n      // Clear any previous OCR data when component mounts\n      setTextInput(\"\");\n      setDocumentTexts({});\n      setUploadedFiles([]);\n      setOcrCompleted(false);\n      setFileNames([]);\n    };\n\n    getStartData(); // get Start Data\n  }, []);\n\n  // validate answer field\n  const ValidateField = (): boolean => {\n    let valid = true;\n    var answer = answerValue.current ?? \"\";\n\n    // set default value\n    if (answer == \" \") {\n      answer = def_answer;\n      localStorage.setItem(\"answer\", answer); // save\n    }\n\n    answer = answer.trim();\n\n    if (answer == \"\") {\n      setAnswerValue({ current: answer, state: \"error\" });\n      valid = false;\n    } else {\n      setAnswerValue({ current: answer, state: \"none\" });\n    }\n\n    return valid;\n  };\n\n  // change answer value\n  const handleChangeValue = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = event.target.value;\n    setAnswerValue({ ...answerValue, current: value });\n    setTextInput(value); // Update textInput state as well\n  };\n\n  // Handle file drop events\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const newFiles = Array.from(e.dataTransfer.files);\n      const validFiles = newFiles.filter((file) => file.type === \"application/pdf\");\n      const invalidFiles = newFiles.length - validFiles.length;\n      \n      if (invalidFiles > 0) {\n        setShowDialog({\n          show: true,\n          text: `${invalidFiles} Datei(en) wurden ignoriert. Nur PDF-Dateien werden unterstützt.`,\n        });\n      }\n      \n      if (validFiles.length > 0) {\n        const updatedFiles = [...uploadedFiles, ...validFiles].slice(0, 5);\n        setUploadedFiles(updatedFiles);\n        setOcrCompleted(false);\n        \n        if (uploadedFiles.length + validFiles.length > 5) {\n          setShowDialog({ show: true, text: \"Maximal 5 Dateien können hochgeladen werden.\" });\n        }\n      }\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const newFiles = Array.from(e.target.files);\n      const validFiles = newFiles.filter((file) => file.type === \"application/pdf\");\n      const invalidFiles = newFiles.length - validFiles.length;\n      \n      if (invalidFiles > 0) {\n        setShowDialog({\n          show: true,\n          text: `${invalidFiles} Datei(en) wurden ignoriert. Nur PDF-Dateien werden unterstützt.`,\n        });\n      }\n      \n      if (validFiles.length > 0) {\n        const updatedFiles = [...uploadedFiles, ...validFiles].slice(0, 5);\n        setUploadedFiles(updatedFiles);\n        setOcrCompleted(false);\n        \n        if (uploadedFiles.length + validFiles.length > 5) {\n          setShowDialog({ show: true, text: \"Maximal 5 Dateien können hochgeladen werden.\" });\n        }\n      }\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    const fileToRemove = uploadedFiles[index];\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles.splice(index, 1);\n    setUploadedFiles(updatedFiles);\n    \n    // Remove the document text for this file\n    if (fileToRemove) {\n      const updatedDocumentTexts = { ...documentTexts };\n      delete updatedDocumentTexts[fileToRemove.name];\n      setDocumentTexts(updatedDocumentTexts);\n      \n      // Update the combined text input\n      updateCombinedText(updatedFiles, updatedDocumentTexts);\n    }\n    \n    // Reset OCR status if all files are removed\n    if (updatedFiles.length === 0) {\n      setOcrCompleted(false);\n      setFileNames([]);\n      setTextInput(\"\");\n      setDocumentTexts({});\n    }\n  };\n  \n  // Helper function to update the combined text from all documents\n  const updateCombinedText = (files: File[], texts: { [key: string]: string }) => {\n    const combinedText = files\n      .map((file) => texts[file.name] || \"\")\n      .filter((text) => text.trim() !== \"\")\n      .join(\"\\n\\n\");\n    setTextInput(combinedText);\n  };\n\n  // Copy OCR text to clipboard for a specific document\n  const copyOcrText = (index: number) => {\n    const file = uploadedFiles[index];\n    const fileName = file ? file.name : \"\";\n    const textToCopy = fileName && documentTexts[fileName] ? documentTexts[fileName] : \"\";\n    \n    // Ensure custom loading is hidden when copying text\n    setShowCustomLoading(false);\n    \n    if (textToCopy && textToCopy.trim() !== \"\") {\n      // Use document.execCommand as a fallback for Office Add-ins environment\n      try {\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = textToCopy;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(textArea);\n        // Show success toast\n        dispatchToast(\n          <Toast>\n            <ToastTitle media={<CheckCircle2 color=\"green\" />}>Text in die Zwischenablage kopiert</ToastTitle>\n          </Toast>,\n          { position: \"top\", timeout: 3000 }\n        );\n      } catch (error) {\n        console.error(\"Error copying text to clipboard:\", error);\n        setShowDialog({ show: true, text: `Fehler beim Kopieren des Textes: ${error.message}` });\n      }\n    } else {\n      setShowDialog({ show: true, text: \"Kein OCR-Text für dieses Dokument verfügbar\" });\n    }\n  };\n\n  const triggerFileInput = () => {\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.click();\n    }\n  };\n\n  // Upload files to S3 using presigned URLs and trigger OCR processing\n  const uploadFilesToS3 = async () => {\n    if (uploadedFiles.length === 0) return;\n    \n    setIsUploading(true);\n    setIsOcrProcessing(true);\n    \n    try {\n      // Upload each file to S3 using presigned URLs\n      const newFileNames = [];\n      const newFileUuids = [];\n      const newFileTypes = [];\n      \n      for (const file of uploadedFiles) {\n        // Get presigned URL from the server\n        const presignedUrlResponse = await fetch(PRESIGNED_URL_ENDPOINT, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: localStorage.getItem(\"apiKey\") || \"\"\n          },\n          body: JSON.stringify({\n            filename: file.name,\n            content_type: file.type,\n            bucket_name: BUCKET_NAME,\n          }),\n        });\n        \n        if (!presignedUrlResponse.ok) {\n          throw new Error(`Failed to get presigned URL: ${presignedUrlResponse.statusText}`);\n        }\n        \n        const presignedData = await presignedUrlResponse.json();\n        // Upload file using the presigned URL\n        const uploadResponse = await fetch(presignedData.url, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": file.type,\n          },\n          body: file,\n        });\n        \n        if (!uploadResponse.ok) {\n          throw new Error(`Failed to upload ${file.name}: ${uploadResponse.statusText}`);\n        }\n        \n        // Store the file information returned from the server\n        newFileNames.push(presignedData.filename);\n        newFileUuids.push(presignedData.uuid);\n        newFileTypes.push(presignedData.filetype);\n      }\n      \n      setFileNames(newFileNames);\n      setIsUploading(false);\n      \n      // Trigger OCR processing with the new file information\n      await triggerOcrProcessing(newFileUuids.map((uuid, index) => `${uuid}${newFileTypes[index]}`));\n    } catch (error) {\n      console.error(\"Error uploading files to S3:\", error);\n      setShowDialog({ show: true, text: `Fehler beim Hochladen: ${error.message}` });\n      setIsUploading(false);\n      setIsOcrProcessing(false);\n    }\n  };\n  \n  // Trigger OCR processing on the backend\n  const triggerOcrProcessing = async (fileNames: string[]) => {\n    try {\n      const apiKey: string = localStorage.getItem(\"apiKey\") || \"\";\n      \n      if (apiKey === \"\") {\n        setShowDialog({ show: true, text: \"API-Schlüssel nicht angegeben\" });\n        setIsOcrProcessing(false);\n        return;\n      }\n      \n      // Prepare files array according to OCRRequest schema\n      const files = fileNames.map((filename) => ({\n        filename,\n        bucket: BUCKET_NAME,\n      }));\n      \n      const response = await fetch(OCR_API_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: apiKey,\n        },\n        body: JSON.stringify({\n          files: files,\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.detail || \"OCR processing failed\");\n      }\n      \n      // Update text input with OCR results if available\n      if (data.documents && data.documents.length > 0) {\n        // Store text for each document separately\n        const updatedDocumentTexts = { ...documentTexts };\n        \n        // Map each document to its file using the index\n        data.documents.forEach((doc: { text: string }, index: number) => {\n          if (index < fileNames.length && doc.text) {\n            // Use the original filename (without UUID) as the key\n            const originalFileName = uploadedFiles[index]?.name || `Document ${index + 1}`;\n            updatedDocumentTexts[originalFileName] = doc.text;\n          }\n        });\n        \n        setDocumentTexts(updatedDocumentTexts);\n        \n        // Update the combined text input\n        const combinedText = uploadedFiles\n          .map((file) => updatedDocumentTexts[file.name] || \"\")\n          .filter((text) => text.trim() !== \"\")\n          .join(\"\\n\\n\");\n        \n        setTextInput(combinedText);\n      }\n      \n      setIsOcrProcessing(false);\n      setOcrCompleted(true);\n      \n      // Show success toast\n      dispatchToast(\n        <Toast>\n          <ToastTitle media={<CheckCircle2 color=\"green\" />}>OCR erfolgreich abgeschlossen</ToastTitle>\n        </Toast>,\n        { position: \"top\", timeout: 5000 }\n      );\n      \n    } catch (error) {\n      console.error(\"Error processing OCR:\", error);\n      setShowDialog({ show: true, text: `OCR-Fehler: ${error.message}` });\n      setIsOcrProcessing(false);\n    }\n  };\n\n  // React to file uploads\n  React.useEffect(() => {\n    if (uploadedFiles.length > 0 && !isUploading && !isOcrProcessing && !ocrCompleted) {\n      uploadFilesToS3();\n    }\n  }, [uploadedFiles, isUploading, isOcrProcessing, ocrCompleted]);\n\n  // Handle toggle change between generate email and generate content\n  const handleGenerateTypeChange = (value: string) => {\n    setGenerateType(value as \"email\" | \"content\");\n  };\n\n  // Handle checkbox change for including email information\n  const handleIncludeEmailChange = (_: React.FormEvent<HTMLInputElement>, data: { checked: boolean }) => {\n    setIncludeEmail(data.checked);\n  };\n\n  // button - get full answer\n  const onButtonSaveClick = () => {\n    if (!ValidateField()) {\n      return;\n    }\n    \n    // Hide any previous custom loading overlay\n    setShowCustomLoading(false);\n\n    // Save both answer value and text input\n    localStorage.setItem(\"answer\", answerValue.current); // save\n    setTextInput(answerValue.current); // Ensure textInput is synced\n\n    var apiKey: string = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n\n    if (apiKey == \"\") {\n      setShowDialog({ show: true, text: \"API-Schlüssel nicht angegeben\" });\n      return;\n    }\n    \n    // Check if we need to wait for OCR processing\n    if (uploadedFiles.length > 0 && !ocrCompleted) {\n      setShowDialog({\n        show: true,\n        text: \"Bitte warten Sie, bis die OCR-Verarbeitung der PDF-Dateien abgeschlossen ist, bevor Sie eine Antwort generieren.\",\n      });\n      return;\n    }\n\n    // get Mail Details\n    getMailDetails((data) => {\n      setShowSpinner(true);\n      setShowCustomLoading(true);\n\n      var user_input: string = answerValue.current;\n\n      console.log(\"subject = \" + data.subject);\n      console.log(\"sender = \" + data.sender);\n      console.log(\"body = \" + data.body);\n      console.log(\"recipients = \" + JSON.stringify(data.recipients));\n      console.log(\"cc = \" + JSON.stringify(data.cc));\n      console.log(\"user_input = \" + user_input);\n      console.log(\"user_email = \" + data.user_email);\n      console.log(\"files = \" + (uploadedFiles.length > 0 ? uploadedFiles.map((f) => f.name).join(\", \") : \"none\"));\n      console.log(\"generateType = \" + generateType);\n      console.log(\"includeEmail = \" + includeEmail);\n\n      // send Request\n      // We don't need to send the actual files anymore, just the extracted text\n      let filesToSend = undefined;\n      \n      // Create a document texts object to pass to the API\n      const documentTextsList = [];\n      if (uploadedFiles.length > 0) {\n        for (const file of uploadedFiles) {\n          // Only add documents that have text content\n          if (documentTexts[file.name] && documentTexts[file.name].trim() !== \"\") {\n            documentTextsList.push({\n              filename: file.name,\n              text: documentTexts[file.name],\n            });\n          }\n        }\n      }\n      \n      sendRequest(\n        \"\", // Empty string as endpoint will be determined in sendRequest based on generateType\n        apiKey, \n        data.subject, \n        data.sender, \n        data.body, \n        user_input, \n        data.user_email, \n        data.recipients, \n        data.cc,\n        filesToSend,\n        documentTextsList,\n        generateType,\n        includeEmail\n      )\n        .then(async (response) => {\n          setShowSpinner(false);\n          setShowCustomLoading(false);\n\n          console.log(\"response = \" + JSON.stringify(response, null, 2));\n\n          // show error dialog\n          if (response.status != \"success\") {\n            // Format the error message properly as a string\n            let errorMessage = \"Ein Fehler ist aufgetreten.\";\n            if (response.detail) {\n              if (typeof response.detail === 'string') {\n                errorMessage = response.detail;\n              } else if (Array.isArray(response.detail)) {\n                // Format array of errors\n                errorMessage = response.detail.map(err => {\n                  if (typeof err === 'string') return err;\n                  if (err.msg) return err.msg;\n                  return JSON.stringify(err);\n                }).join('\\n');\n              } else {\n                // Convert object to string\n                errorMessage = JSON.stringify(response.detail);\n              }\n            }\n            setShowDialog({ show: true, text: errorMessage });\n            return;\n          }\n\n          // Handle different response formats based on the generate type\n          if (generateType === \"email\") {\n            insertText(response.email_text); // Write email text to the cursor point\n          } else {\n            insertText(response.content_text); // Write content text to the cursor point\n          }\n        })\n        .catch((error) => {\n          setShowSpinner(false);\n          setShowCustomLoading(false);\n          setShowDialog({ show: true, text: `Anfragefehler: ${error}` }); // show error dialog\n        });\n    });\n  };\n\n  // result dialog event\n  const handleResultDialog = () => {\n    setShowSpinner(false);\n    setShowDialog({ ...showDialog, show: false });\n  };\n\n  return (\n    <div className={styles.root} role=\"tabpanel\" aria-labelledby=\"Settings\">\n      <Toaster />\n      \n      {showCustomLoading && (\n        <div className={styles.customLoadingOverlay}>\n          <Spinner size=\"large\" />\n          <div className={styles.loadingText}>Antwort wird generiert...</div>\n        </div>\n      )}\n      \n      {(showSpinner || isUploading || isOcrProcessing) && (\n        <Dialog defaultOpen={true}>\n          <DialogSurface className={styles.spinner}>\n            <Spinner \n              autoFocus \n              labelPosition=\"after\" \n              label={\n                isUploading\n                  ? \"Dateien werden hochgeladen...\"\n                  : isOcrProcessing\n                    ? \"OCR-Verarbeitung läuft...\"\n                    : \"Wird geladen...\"\n              }\n            />\n          </DialogSurface>\n        </Dialog>\n      )}\n\n      {showDialog.show && (\n        <DialogForm\n          type=\"alert\"\n          title=\"Fehler\"\n          content={showDialog.text}\n          closeName=\"OK\"\n          showPrimary={false}\n          onResultDialog={handleResultDialog}\n        />\n      )}\n\n      <div className={styles.answer_dialog}>\n        <div style={{ display: \"flex\", alignItems: \"center\", margin: \"10px 0\" }}>\n          <Settings size={18} style={{ marginRight: \"4px\" }} />\n          <span style={{ fontWeight: 500, fontSize: \"14px\" }}>Modus</span>\n        </div>\n        <div style={{ display: \"flex\", width: \"100%\", marginBottom: \"15px\" }}>\n          <Tooltip content=\"Erstellt eine formelle E-Mail-Antwort mit Anrede und Grußformel basierend auf Ihrem Input und den vorliegenden Informationen.\" relationship=\"label\">\n            <div\n              className={`${styles.toggleButton} ${styles.toggleButtonLeft} ${generateType === \"email\" ? styles.toggleButtonActive : styles.toggleButtonInactive}`}\n              onClick={() => handleGenerateTypeChange(\"email\")}\n            >\n              <Mail\n                size={18}\n                color={generateType === \"email\" ? \"white\" : \"#006d5c\"}\n                className={styles.toggleIcon}\n              />\n              E-Mail Antwort\n            </div>\n          </Tooltip>\n          <Tooltip content=\"Erzeugt flexiblen Text nach Ihren Vorgaben - mit oder ohne Berücksichtigung des E-Mail-Kontexts.\" relationship=\"label\">\n            <div\n              className={`${styles.toggleButton} ${styles.toggleButtonRight} ${generateType === \"content\" ? styles.toggleButtonActive : styles.toggleButtonInactive}`}\n              onClick={() => handleGenerateTypeChange(\"content\")}\n            >\n              <FileText\n                size={18}\n                color={generateType === \"content\" ? \"white\" : \"#006d5c\"}\n                className={styles.toggleIcon}\n              />\n              Freier Text\n            </div>\n          </Tooltip>\n        </div>\n        \n        {generateType === \"content\" && (\n          <div className={styles.checkboxContainer}>\n            <Checkbox\n              label=\"E-Mail-Informationen einbeziehen\"\n              checked={includeEmail}\n              onChange={handleIncludeEmailChange}\n            />\n          </div>\n        )}\n        \n        <Field\n          className={styles.dialog_field}\n          label={\n            <>\n              <Pencil size={18} className={styles.pencil} />\n              {generateType === \"email\" ? \"Nutzer Input\" : \"Nutzer Input (+ Anweisungen an KI)\"}\n            </>\n          }\n          validationState={answerValue.state}\n          validationMessage=\"Kurze Antwort eingeben\"\n          required\n        >\n          <Textarea\n            value={answerValue.current}\n            rows={10}\n            placeholder={generateType === \"email\" ? \"Kurzen Text eingeben..\" : \"Kurzen Text und Anweisungen eingeben..\"}\n            size=\"large\"\n            resize=\"vertical\"\n            onChange={handleChangeValue}\n            lang=\"de\"\n          />\n        </Field>\n\n        <Divider className={styles.divider} />\n\n        <Text className={styles.fileUploadInfo}>\n          Laden Sie bis zu 5 PDF-Dateien hoch, um Text zu extrahieren und in die Anfrage einzubeziehen\n        </Text>\n\n        <div \n          ref={dropZoneRef}\n          className={`${styles.dropZone} ${isDragging ? styles.dropZoneActive : \"\"} ${ocrCompleted ? styles.dropZoneSuccess : \"\"}`}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n          onClick={triggerFileInput}\n        >\n          <Upload size={24} />\n          <p>\n            PDF-Dateien hierher ziehen oder klicken zum Auswählen ({uploadedFiles.length}/5)\n            {ocrCompleted && uploadedFiles.length > 0 && (\n              <span className={styles.ocrCompletedMessage}>\n                <CheckCircle2 size={16} className={styles.checkIcon} />\n                OCR abgeschlossen\n              </span>\n            )}\n          </p>\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            accept=\"application/pdf\"\n            className={styles.hiddenInput}\n            multiple\n            onChange={handleFileSelect}\n            aria-label=\"PDF-Datei auswählen\"\n          />\n        </div>\n        \n        {uploadedFiles.length > 0 && (\n          <div style={{ marginBottom: '15px' }}>\n            {uploadedFiles.map((file, index) => (\n              <div key={index} className={styles.filePreview}>\n                <FileText size={20} className={styles.fileIcon} />\n                <span className={styles.fileName}>{file.name}</span>\n                <Copy size={18} className={styles.copyButton} onClick={() => copyOcrText(index)} aria-label=\"Copy OCR text\" />\n                <X size={18} className={styles.removeButton} onClick={() => handleRemoveFile(index)} aria-label=\"Remove file\" />\n              </div>\n            ))}\n          </div>\n        )}\n\n        <Button className={styles.button_send} appearance=\"primary\" onClick={onButtonSaveClick}>\n          {generateType === \"email\" ? \"Antwort generieren\" : \"Text generieren\"}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TabAnswer;\n","import * as React from \"react\";\nimport { Button, Field, Input, makeStyles } from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo, FieldInfo } from \"../../../helpers\";\n\n/* global HTMLInputElement, localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  saving_dialog: {\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n  dialog_field: {\n    fontWeight: 600,\n    marginBottom: \"15px\",\n  },\n  dialog_add: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n});\n\nconst TabSettings = () => {\n  const styles = useStyles();\n\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" }); // dialog form\n  const [keyValue, setKeyValue] = React.useState<FieldInfo>({ current: \"\", state: \"none\" }); // apiKey field value\n\n  React.useEffect(() => {\n    const getStartData = async () => {\n      var apiKey = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n      setKeyValue({ current: apiKey, state: \"none\" });\n    };\n\n    getStartData(); // get Start Data\n  }, []);\n\n  // validate field\n  const ValidateField = (): boolean => {\n    let valid = true;\n    var apiKey = keyValue.current.trim();\n    setKeyValue({ ...keyValue, current: apiKey, state: \"none\" });\n    return valid;\n  };\n\n  // change input value\n  const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setKeyValue({ ...keyValue, current: event.target.value });\n  };\n\n  // button - save api key\n  const onButtonSaveClick = () => {\n    if (!ValidateField()) {\n      return;\n    }\n\n    localStorage.setItem(\"apiKey\", keyValue.current); // save\n\n    setShowDialog({ show: true, text: \"Änderungen gespeichert\" });\n  };\n\n  // result dialog event\n  const handleResultDialog = () => {\n    setShowDialog({ ...showDialog, show: false });\n  };\n\n  return (\n    <div className={styles.root} role=\"tabpanel\" aria-labelledby=\"Settings\">\n      {showDialog.show && (\n        <DialogForm\n          type=\"modal\"\n          title=\"Info\"\n          content={showDialog.text}\n          closeName=\"OK\"\n          showPrimary={false}\n          onResultDialog={handleResultDialog}\n        />\n      )}\n\n      <div className={styles.saving_dialog}>\n        <Field\n          className={styles.dialog_field}\n          label=\"API-Schlüsselwert\"\n          validationState={keyValue.state}\n          validationMessage=\"Kopieren Sie Ihren API-Schlüsselwert und fügen Sie ihn ein\"\n          required\n        >\n          <Input value={keyValue.current} placeholder=\"z.b. outlookapi47eda17f38081e...\" onChange={handleChangeValue} />\n        </Field>\n\n        <Button className={styles.dialog_add} appearance=\"primary\" onClick={onButtonSaveClick}>\n          Speichern\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TabSettings;\n","import * as React from \"react\";\nimport { \n  Button, \n  Dialog, \n  DialogSurface, \n  Field, \n  Spinner, \n  makeStyles,\n  Text,\n  Divider,\n  Toast,\n  ToastTitle,\n  useToastController,\n  Toaster,\n  Dropdown,\n  Option,\n  Input,\n  Card,\n  CardHeader\n} from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo } from \"../../../helpers\";\nimport { getMailDetails } from \"../taskpane\";\nimport { CheckCircle2, ArrowRight } from \"lucide-react\";\n\n/* global console, localStorage, fetch, Office */\n\n// API Configuration\nconst COMBINED_ACTIVITY_ENDPOINT = \"/outlook/combined-activity-data\";\nconst CREATE_ACTIVITY_ENDPOINT = \"/outlook/create-activity\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  formContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"15px\",\n  },\n  button: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n  spinner: {\n    width: \"75%\",\n  },\n  customLoadingOverlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(255, 255, 255, 0.8)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    zIndex: 9999,\n  },\n  loadingText: {\n    marginTop: \"10px\",\n    fontSize: \"14px\",\n    fontWeight: 600,\n  },\n  divider: {\n    margin: \"15px 0\",\n  },\n  stepContainer: {\n    marginBottom: \"20px\",\n  },\n  stepHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: \"10px\",\n  },\n  stepNumber: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"24px\",\n    height: \"24px\",\n    borderRadius: \"50%\",\n    backgroundColor: \"#0078d4\",\n    color: \"white\",\n    marginRight: \"10px\",\n    fontSize: \"14px\",\n    fontWeight: \"bold\",\n  },\n  stepTitle: {\n    fontWeight: \"bold\",\n    fontSize: \"16px\",\n  },\n  suggestionCard: {\n    marginBottom: \"15px\",\n    border: \"1px solid #edebe9\",\n    boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.05)\",\n  },\n  cardHeader: {\n    paddingBottom: \"8px\",\n  },\n  cardContent: {\n    padding: \"0 16px 16px 16px\",\n  },\n  fieldGroup: {\n    marginBottom: \"12px\",\n  },\n  fieldLabel: {\n    fontWeight: \"600\",\n    marginBottom: \"4px\",\n    fontSize: \"12px\",\n    color: \"#605e5c\",\n  },\n  fieldValue: {\n    fontSize: \"14px\",\n    padding: \"8px\",\n    backgroundColor: \"#f3f2f1\",\n    borderRadius: \"4px\",\n  },\n  nextStepButton: {\n    marginTop: \"10px\",\n  },\n  assignedUserField: {\n    marginTop: \"15px\",\n  }\n});\n\nconst TabActivity = () => {\n  const styles = useStyles();\n  const { dispatchToast } = useToastController();\n\n  // State for dialog and loading\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" });\n  const [showSpinner, setShowSpinner] = React.useState<boolean>(false);\n  const [showCustomLoading, setShowCustomLoading] = React.useState<boolean>(false);\n\n  // State for activity data\n  const [currentStep, setCurrentStep] = React.useState<number>(1);\n  const [suggestedTitle, setSuggestedTitle] = React.useState<string>(\"\");\n  const [suggestedCategory, setSuggestedCategory] = React.useState<string>(\"\");\n  const [suggestedFolderId, setSuggestedFolderId] = React.useState<string>(\"\");\n  const [categories, setCategories] = React.useState<string[]>([]);\n  \n  // Editable fields\n  const [title, setTitle] = React.useState<string>(\"\");\n  const [category, setCategory] = React.useState<string>(\"\");\n  const [assignedUser, setAssignedUser] = React.useState<string>(\"\");\n  const [folderPath, setFolderPath] = React.useState<string>(\"\");\n\n  // Get email details and suggestions\n  React.useEffect(() => {\n    const getSuggestions = () => {\n      try {\n        setShowSpinner(true);\n        \n        // Get email details using callback\n        getMailDetails((mailDetails) => {\n          if (!mailDetails) {\n            setShowDialog({ \n              show: true, \n              text: \"Keine E-Mail ausgewählt. Bitte wählen Sie eine E-Mail aus, um fortzufahren.\" \n            });\n            setShowSpinner(false);\n            return;\n          }\n\n        // Get API key from localStorage\n        const apiKey = localStorage.getItem(\"apiKey\");\n        if (!apiKey) {\n          setShowDialog({ \n            show: true, \n            text: \"Kein API-Schlüssel gefunden. Bitte geben Sie einen API-Schlüssel in den Einstellungen ein.\" \n          });\n          setShowSpinner(false);\n          return;\n        }\n\n        // Prepare request body\n        const requestBody = {\n          messages: [\n            {\n              subject: mailDetails.subject || \"\",\n              body: mailDetails.body || \"\",\n              sender: mailDetails.sender || \"\",\n              recipients: mailDetails.recipients || [],\n              cc: mailDetails.cc || [],\n              thread_body: mailDetails.body || \"\",\n              raw_content: null\n            }\n          ]\n        };\n\n          // Call the combined activity data endpoint\n          fetch(`https://fg.server.lavel.io${COMBINED_ACTIVITY_ENDPOINT}`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": apiKey\n            },\n            body: JSON.stringify(requestBody)\n          })\n          .then(response => {\n            if (!response.ok) {\n              return response.json().then(errorData => {\n                throw new Error(errorData.detail || \"Fehler beim Abrufen der Aktivitätsdaten\");\n              });\n            }\n            return response.json();\n          })\n          .then(data => {\n        \n            // Update state with suggestions\n            setSuggestedTitle(data.suggested_title || \"\");\n            setSuggestedCategory(data.category || \"\");\n            setSuggestedFolderId(data.folder_id || \"\");\n            setCategories(data.categories || []);\n            \n            // Set initial values for editable fields\n            setTitle(data.suggested_title || \"\");\n            setCategory(data.category || \"\");\n            setFolderPath(data.folder_id ? `${data.folder_id}` : \"\");\n            \n            // Get user email from localStorage or use sender email\n            const userEmail = localStorage.getItem(\"userEmail\") || mailDetails.user_email || \"\";\n            setAssignedUser(userEmail);\n            \n            setShowSpinner(false);\n          })\n          .catch(error => {\n            console.error(\"Error getting suggestions:\", error);\n            setShowDialog({ \n              show: true, \n              text: `Fehler beim Abrufen der Vorschläge: ${error.message}` \n            });\n            setShowSpinner(false);\n          });\n        });\n      } catch (error) {\n        console.error(\"Error in getSuggestions:\", error);\n        setShowDialog({ \n          show: true, \n          text: `Fehler: ${error.message}` \n        });\n        setShowSpinner(false);\n      }\n    };\n\n    getSuggestions();\n  }, []);\n\n  // Create activity\n  const createActivity = () => {\n    try {\n      setShowCustomLoading(true);\n      \n      // Get email details using callback\n      getMailDetails((mailDetails) => {\n        if (!mailDetails) {\n          setShowDialog({ \n            show: true, \n            text: \"Keine E-Mail ausgewählt. Bitte wählen Sie eine E-Mail aus, um fortzufahren.\" \n          });\n          setShowCustomLoading(false);\n          return;\n        }\n\n      // Get API key from localStorage\n      const apiKey = localStorage.getItem(\"apiKey\");\n      if (!apiKey) {\n        setShowDialog({ \n          show: true, \n          text: \"Kein API-Schlüssel gefunden. Bitte geben Sie einen API-Schlüssel in den Einstellungen ein.\" \n        });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      // Validate required fields\n      if (!title.trim()) {\n        setShowDialog({ show: true, text: \"Bitte geben Sie einen Titel ein.\" });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      if (!category.trim()) {\n        setShowDialog({ show: true, text: \"Bitte wählen Sie eine Kategorie aus.\" });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      if (!assignedUser.trim()) {\n        setShowDialog({ show: true, text: \"Bitte geben Sie einen zugewiesenen Benutzer ein.\" });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      if (!folderPath.trim()) {\n        setShowDialog({ show: true, text: \"Bitte geben Sie einen Ordnerpfad ein.\" });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      // Prepare request body\n      const requestBody = {\n        title: title,\n        category: category,\n        assigned_user: assignedUser,\n        messages: [\n          {\n            subject: mailDetails.subject || \"\",\n            body: mailDetails.body || \"\",\n            sender: mailDetails.sender || \"\",\n            recipients: mailDetails.recipients || [],\n            cc: mailDetails.cc || [],\n            thread_body: mailDetails.body || \"\"\n          }\n        ],\n        folder_path: folderPath,\n        shouldCreateActivity: true\n      };\n\n        // Call the create activity endpoint\n        fetch(`https://fg.server.lavel.io${CREATE_ACTIVITY_ENDPOINT}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": apiKey\n          },\n          body: JSON.stringify(requestBody)\n        })\n        .then(response => {\n          if (!response.ok) {\n            return response.json().then(errorData => {\n              throw new Error(errorData.detail || \"Fehler beim Erstellen der Aktivität\");\n            });\n          }\n          return response.json();\n        })\n        .then(data => {\n      \n          // Show success toast\n          dispatchToast(\n            <Toast>\n              <ToastTitle media={<CheckCircle2 color=\"green\" />}>\n                Aktivität erfolgreich erstellt\n              </ToastTitle>\n            </Toast>,\n            { position: \"top\", timeout: 3000 }\n          );\n          \n          // Reset form\n          setCurrentStep(1);\n          setSuggestedTitle(\"\");\n          setSuggestedCategory(\"\");\n          setSuggestedFolderId(\"\");\n          setTitle(\"\");\n          setCategory(\"\");\n          setAssignedUser(\"\");\n          setFolderPath(\"\");\n          \n          setShowCustomLoading(false);\n        })\n        .catch(error => {\n          console.error(\"Error creating activity:\", error);\n          setShowDialog({ \n            show: true, \n            text: `Fehler beim Erstellen der Aktivität: ${error.message}` \n          });\n          setShowCustomLoading(false);\n        });\n      });\n    } catch (error) {\n      console.error(\"Error in createActivity:\", error);\n      setShowDialog({ \n        show: true, \n        text: `Fehler: ${error.message}` \n      });\n      setShowCustomLoading(false);\n    }\n  };\n\n  // Go to next step\n  const goToNextStep = () => {\n    setCurrentStep(2);\n  };\n\n  // Go back to previous step\n  const goToPreviousStep = () => {\n    setCurrentStep(1);\n  };\n\n  return (\n    <div className={styles.root}>\n      {showSpinner && (\n        <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"20px\" }}>\n          <Spinner className={styles.spinner} label=\"Lade Vorschläge...\" />\n        </div>\n      )}\n\n      {showCustomLoading && (\n        <div className={styles.customLoadingOverlay}>\n          <Spinner size=\"large\" />\n          <div className={styles.loadingText}>Aktivität wird erstellt...</div>\n        </div>\n      )}\n\n      {!showSpinner && (\n        <div className={styles.formContainer}>\n          {currentStep === 1 && (\n            <div className={styles.stepContainer}>\n              <div className={styles.stepHeader}>\n                <div className={styles.stepNumber}>1</div>\n                <div className={styles.stepTitle}>Aktivitätsvorschlag prüfen</div>\n              </div>\n              \n              <Text>\n                Basierend auf der ausgewählten E-Mail wurde ein Aktivitätsvorschlag erstellt.\n                Überprüfen Sie die Informationen und klicken Sie auf \"Weiter\", um fortzufahren.\n              </Text>\n              \n              <Divider className={styles.divider} />\n              \n              <Card className={styles.suggestionCard}>\n                <CardHeader className={styles.cardHeader} header={<Text weight=\"semibold\">Vorgeschlagene Aktivität</Text>} />\n                <div className={styles.cardContent}>\n                  <div className={styles.fieldGroup}>\n                    <div className={styles.fieldLabel}>Titel</div>\n                    <div className={styles.fieldValue}>{suggestedTitle}</div>\n                  </div>\n                  \n                  <div className={styles.fieldGroup}>\n                    <div className={styles.fieldLabel}>Kategorie</div>\n                    <div className={styles.fieldValue}>{suggestedCategory}</div>\n                  </div>\n                  \n                  <div className={styles.fieldGroup}>\n                    <div className={styles.fieldLabel}>Ordner ID</div>\n                    <div className={styles.fieldValue}>{suggestedFolderId}</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Button \n                appearance=\"primary\" \n                className={styles.nextStepButton}\n                onClick={goToNextStep}\n                icon={<ArrowRight />}\n              >\n                Weiter zur Bearbeitung\n              </Button>\n            </div>\n          )}\n          \n          {currentStep === 2 && (\n            <div className={styles.stepContainer}>\n              <div className={styles.stepHeader}>\n                <div className={styles.stepNumber}>2</div>\n                <div className={styles.stepTitle}>Aktivität bearbeiten und erstellen</div>\n              </div>\n              \n              <Text>\n                Bearbeiten Sie die Aktivitätsinformationen nach Bedarf und klicken Sie auf \"Aktivität erstellen\",\n                um die Aktivität zu erstellen.\n              </Text>\n              \n              <Divider className={styles.divider} />\n              \n              <Field label=\"Titel\" required>\n                <Input \n                  value={title} \n                  onChange={(e) => setTitle(e.target.value)} \n                  placeholder=\"Aktivitätstitel\"\n                />\n              </Field>\n              \n              <Field label=\"Kategorie\" required>\n                <Dropdown\n                  value={category}\n                  onOptionSelect={(_, data) => setCategory(data.optionValue || \"\")}\n                  placeholder=\"Kategorie auswählen\"\n                >\n                  {categories.map((cat) => (\n                    <Option key={cat} value={cat}>\n                      {cat}\n                    </Option>\n                  ))}\n                </Dropdown>\n              </Field>\n              \n              <Field label=\"Ordnerpfad\" required>\n                <Input \n                  value={folderPath} \n                  onChange={(e) => setFolderPath(e.target.value)} \n                  placeholder=\"z.B. 301 Projektname\"\n                />\n              </Field>\n              \n              <Field label=\"Zugewiesener Benutzer\" required className={styles.assignedUserField}>\n                <Input \n                  value={assignedUser} \n                  onChange={(e) => setAssignedUser(e.target.value)} \n                  placeholder=\"E-Mail-Adresse\"\n                />\n              </Field>\n              \n              <Divider className={styles.divider} />\n              \n              <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <Button \n                  appearance=\"secondary\" \n                  onClick={goToPreviousStep}\n                >\n                  Zurück\n                </Button>\n                \n                <Button \n                  appearance=\"primary\" \n                  onClick={createActivity}\n                >\n                  Aktivität erstellen\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {showDialog.show && (\n        <Dialog modalType=\"alert\" open={showDialog.show}>\n          <DialogSurface>\n            <DialogForm\n              title=\"Hinweis\"\n              message={showDialog.text}\n              onClose={() => setShowDialog({ show: false, text: \"\" })}\n            />\n          </DialogSurface>\n        </Dialog>\n      )}\n      \n      <Toaster />\n    </div>\n  );\n};\n\nexport default TabActivity;\n","import * as React from \"react\";\nimport { makeStyles, Tab, TabList } from \"@fluentui/react-components\";\nimport type { SelectTabData, SelectTabEvent, TabValue } from \"@fluentui/react-components\";\nimport TabAnswer from \"./TabAnswer\";\nimport TabSettings from \"./TabSettings\";\nimport TabActivity from \"./TabActivity\";\n\n\n/* global localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    alignItems: \"flex-start\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    paddingTop: \"10px\",\n    paddingLeft: \"1px\",\n    paddingRight: \"1px\",\n  },\n  tab_menu: {\n    paddingBottom: \"20px\",\n  },\n  tab_cont: {\n    width: \"100%\",\n  },\n});\n\nexport const TabPanes = () => {\n  const styles = useStyles();\n\n  var apiKey = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n\n  const [selectedTab, setSelectedTab] = React.useState<TabValue>(apiKey == \"\" ? \"settings\" : \"answer\");\n\n  const onTabSelect = (_event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedTab(data.value);\n  };\n\n  return (\n    <div className={styles.root}>\n      <TabList className={styles.tab_menu} selectedValue={selectedTab} onTabSelect={onTabSelect}>\n        <Tab id=\"Answer\" value=\"answer\">\n          Antwort\n        </Tab>\n\n        {/* Temporarily hidden Aktivität tab\n        <Tab id=\"Activity\" value=\"activity\">\n          Aktivität\n        </Tab>\n        */}\n\n        <Tab id=\"Settings\" value=\"settings\">\n          Einstellungen\n        </Tab>\n      </TabList>\n\n      <div className={styles.tab_cont}>\n        {selectedTab === \"answer\" && <TabAnswer />}\n\n        {selectedTab === \"activity\" && <TabActivity />}\n\n        {selectedTab === \"settings\" && <TabSettings />}\n      </div>\n    </div>\n  );\n};\n\nexport default TabPanes;\n","import * as React from \"react\";\nimport { Divider, makeStyles } from \"@fluentui/react-components\";\nimport { TabPanes } from \"./TabPanes\";\n\n/* global */\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"100vh\",\n    maxWidth: \"370px\",\n  },\n  divider: {\n    marginTop: \"10px\",\n  },\n});\n\nconst App = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <TabPanes />\n      <Divider className={styles.divider} inset />\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./components/App\";\nimport { createLightTheme, FluentProvider } from \"@fluentui/react-components\";\nimport type { BrandVariants, Theme } from \"@fluentui/react-components\";\n\n/* global document, Office, module, require, HTMLElement */\n\n// themes designer: https://react.fluentui.dev/?path=/docs/theme-theme-designer--docs\nconst outlook: BrandVariants = {\n  10: \"#010101\",\n  20: \"#010202\",\n  30: \"#010403\",\n  40: \"#0D1C17\",\n  50: \"#0F2F25\",\n  60: \"#0E3D30\",\n  70: \"#094B3A\",\n  80: \"#005B46\",\n  90: \"#216753\",\n  100: \"#377461\",\n  110: \"#4B816F\",\n  120: \"#5F8E7D\",\n  130: \"#729B8C\",\n  140: \"#85A99C\",\n  150: \"#98B7AB\",\n  160: \"#ACC4BB\",\n};\n\nconst customTheme: Theme = {\n  ...createLightTheme(outlook),\n};\n\nconst rootElement: HTMLElement | null = document.getElementById(\"container\");\nconst root = rootElement ? createRoot(rootElement) : undefined;\n\nOffice.onReady(() => {\n  root?.render(\n    <FluentProvider theme={customTheme}>\n      <App />\n    </FluentProvider>\n  );\n});\n"],"names":["useStyles","dialog","marginTop","marginRight","marginLeft","dialog_apply","backgroundColor","props","styles","Dialog","modalType","type","defaultOpen","onOpenChange","onResultDialog","DialogSurface","className","DialogBody","DialogTitle","title","DialogContent","content","DialogActions","DialogTrigger","disableButtonEnhancement","Button","appearance","autoFocus","closeName","showPrimary","onClick","sendRequest","endpoint","apiKey","subject","sender","body","user_input","user_email","recipients","cc","files","documents","generateType","includeEmail","targetEndpoint","requestBody","messages","length","include_email","apiUrl","response","fetch","method","headers","Authorization","JSON","stringify","json","error","insertText","text","Office","context","mailbox","item","setSelectedDataAsync","coercionType","CoercionType","Text","asyncResult","status","AsyncResultStatus","Failed","message","getMailDetails","callback","getAsync","subjectResult","value","from","fromResult","emailAddress","to","toResult","map","recipient","ccResult","bodyResult","BUCKET_NAME","root","flexDirection","display","padding","width","boxSizing","answer_dialog","maxWidth","overflow","dialog_field","fontWeight","marginBottom","button_send","spinner","customLoadingOverlay","position","top","left","right","bottom","alignItems","justifyContent","zIndex","toggleContainer","toggleGroupContainer","toggleButton","border","cursor","flex","transition","fontSize","userSelect","toggleButtonLeft","borderRadius","borderRight","toggleButtonRight","toggleButtonActive","color","toggleButtonInactive","opacity","toggleIcon","verticalAlign","checkboxContainer","loadingText","pencil","dropZone","textAlign","dropZoneActive","dropZoneSuccess","filePreview","fileIcon","fileName","textOverflow","whiteSpace","removeButton","copyButton","divider","margin","fileUploadInfo","ocrCompletedMessage","checkIcon","hiddenInput","showDialog","setShowDialog","show","showSpinner","setShowSpinner","showCustomLoading","setShowCustomLoading","answerValue","setAnswerValue","current","state","documentTexts","setDocumentTexts","textInput","setTextInput","isDragging","setIsDragging","uploadedFiles","setUploadedFiles","isUploading","setIsUploading","isOcrProcessing","setIsOcrProcessing","ocrCompleted","setOcrCompleted","fileNames","setFileNames","setGenerateType","setIncludeEmail","dropZoneRef","dispatchToast","useToastController","def_answer","answer","localStorage","getItem","updateCombinedText","texts","combinedText","file","name","filter","trim","join","triggerOcrProcessing","filename","bucket","data","ok","Error","detail","updatedDocumentTexts","forEach","doc","index","originalFileName","Toast","ToastTitle","media","timeout","newFileNames","newFileUuids","newFileTypes","presignedUrlResponse","content_type","bucket_name","statusText","presignedData","uploadResponse","url","push","uuid","filetype","handleGenerateTypeChange","role","Toaster","Spinner","size","labelPosition","label","style","Tooltip","relationship","Checkbox","checked","onChange","_","Field","validationState","validationMessage","required","Textarea","T","rows","placeholder","resize","event","target","lang","Divider","ref","onDragOver","e","preventDefault","onDragLeave","onDrop","dataTransfer","newFiles","Array","validFiles","invalidFiles","updatedFiles","slice","fileInput","document","getElementById","click","id","accept","multiple","key","textToCopy","textArea","createElement","appendChild","select","execCommand","removeChild","copyOcrText","fileToRemove","splice","handleRemoveFile","valid","setItem","ValidateField","documentTextsList","filesToSend","then","errorMessage","isArray","err","msg","email_text","content_text","catch","paddingLeft","paddingRight","saving_dialog","dialog_add","keyValue","setKeyValue","Input","formContainer","gap","button","stepContainer","stepHeader","stepNumber","height","stepTitle","suggestionCard","boxShadow","cardHeader","paddingBottom","cardContent","fieldGroup","fieldLabel","fieldValue","nextStepButton","assignedUserField","currentStep","setCurrentStep","suggestedTitle","setSuggestedTitle","suggestedCategory","setSuggestedCategory","suggestedFolderId","setSuggestedFolderId","categories","setCategories","setTitle","category","setCategory","assignedUser","setAssignedUser","folderPath","setFolderPath","mailDetails","thread_body","raw_content","errorData","suggested_title","folder_id","userEmail","getSuggestions","Card","CardHeader","header","weight","icon","A","Dropdown","onOptionSelect","optionValue","cat","Option","assigned_user","folder_path","shouldCreateActivity","open","onClose","paddingTop","tab_menu","tab_cont","TabPanes","selectedTab","setSelectedTab","TabList","selectedValue","onTabSelect","_event","Tab","minHeight","inset","customTheme","createLightTheme","rootElement","onReady","render","FluentProvider","theme"],"sourceRoot":""}