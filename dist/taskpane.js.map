{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-react/./src/taskpane/components/DialogForm.tsx","webpack://office-addin-taskpane-react/./helpers.ts","webpack://office-addin-taskpane-react/./src/taskpane/taskpane.ts","webpack://office-addin-taskpane-react/./src/taskpane/components/TabAnswer.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/TabSettings.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/TabActivity.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/TabPanes.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/App.tsx","webpack://office-addin-taskpane-react/./src/taskpane/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Parser from \"html-react-parser\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogBody,\n  DialogContent,\n  DialogSurface,\n  DialogTitle,\n  DialogTrigger,\n  makeStyles,\n} from \"@fluentui/react-components\";\n\nexport interface DialogFormProps {\n  type: \"non-modal\" | \"modal\" | \"alert\";\n  title: string;\n  content: string;\n  closeName: string;\n  showPrimary: boolean;\n  onResultDialog: (result: \"ok\" | \"cancel\") => void;\n}\n\nconst useStyles = makeStyles({\n  dialog: {\n    marginTop: \"10px\",\n    marginRight: \"10px\",\n    marginLeft: \"10px\",\n  },\n  dialog_apply: {\n    backgroundColor: \"red\",\n  },\n});\n\nconst DialogForm = (props: DialogFormProps) => {\n  const styles = useStyles();\n\n  // button - confirm\n  const onButtonApplyClick = () => {\n    props.onResultDialog(\"ok\");\n  };\n\n  // button - cancel\n  const onOpenChange = () => {\n    props.onResultDialog(\"cancel\");\n  };\n\n  return (\n    <Dialog modalType={props.type} defaultOpen={true} onOpenChange={onOpenChange}>\n      <DialogSurface className={styles.dialog}>\n        <DialogBody>\n          <DialogTitle>{props.title}</DialogTitle>\n\n          <DialogContent>{Parser(props.content)}</DialogContent>\n\n          <DialogActions>\n            <DialogTrigger disableButtonEnhancement>\n              <Button appearance=\"secondary\" autoFocus>\n                {props.closeName}\n              </Button>\n            </DialogTrigger>\n            {props.showPrimary && (\n              <Button appearance=\"primary\" className={styles.dialog_apply} onClick={onButtonApplyClick}>\n                Löschen\n              </Button>\n            )}\n          </DialogActions>\n        </DialogBody>\n      </DialogSurface>\n    </Dialog>\n  );\n};\n\nexport default DialogForm;\n","// helper functions & parameters\n\n/* global console fetch */\n\nconst Host = \"https://fg.server.lavel.io\";\n\nexport interface DialogInfo {\n  show: boolean;\n  text: string;\n}\n\nexport interface FieldInfo {\n  current: string;\n  state: \"none\" | \"error\" | \"warning\" | \"success\" | undefined;\n}\n\n// send Request to API\nexport async function sendRequest(\n  endpoint: string,\n  apiKey: string,\n  subject: string,\n  sender: string,\n  body: string,\n  user_input: string,\n  user_email: string,\n  recipients: string[] = [],\n  cc: string[] = [],\n  _files?: File[],\n  documentTexts?: Array<{ filename: string; text: string }>\n): Promise<any> {\n  var url = Host + endpoint;\n  console.log(` sendRequest to: ${url}`);\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    authorization: apiKey,\n  };\n\n  const data: any = {\n    messages: [\n      {\n        subject: subject,\n        body: body,\n        sender: sender,\n        recipients: recipients,\n        cc: cc,\n        thread_body: body,\n        raw_content: null\n      },\n    ],\n    user_input: user_input,\n    target_language: \"german\",\n    user_email: user_email,\n  };\n\n  // If document texts are provided, add them to the request\n  if (documentTexts && documentTexts.length > 0) {\n    // Only add documents if there's at least one with text\n    if (documentTexts.some((doc) => doc.text)) {\n      data.documents = documentTexts;\n    }\n  }\n\n  // If document texts are provided directly, use them instead of processing files\n  if (documentTexts && documentTexts.length > 0) {\n    data.documents = documentTexts.filter((doc) => doc.text.trim() !== \"\");\n  }\n  \n  // We don't need to process files for base64 content anymore since we're using the document texts\n  // that were already extracted via OCR\n\n  console.log(\"data = \" + JSON.stringify(data, null, 2));\n\n  var options = {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(data),\n    muteHttpExceptions: true,\n  };\n\n  // HTTP request\n  var response = await fetch(url, options);\n\n  if (![200, 400, 401, 404, 502].includes(response.status)) {\n    console.log(`Wrong response code: ${response.status}`);\n    return { detail: `Wrong response code: ${response.status}` };\n  }\n\n  try {\n    let data: any = await response.json();\n    console.log(\"data: \" + JSON.stringify(data, null, 2));\n    return data;\n  } catch (error) {\n    console.log(`Invalid JSON: ${error}`);\n    return { detail: `Invalid JSON: ${error}` };\n  }\n}\n\n// Helper function to convert File to base64\nexport function fileToBase64(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const base64String = reader.result as string;\n      // Remove the data URL prefix (e.g., \"data:application/pdf;base64,\")\n      const base64Content = base64String.split(',')[1];\n      resolve(base64Content);\n    };\n    reader.onerror = error => reject(error);\n  });\n}\n","/* global Office console */\n\n// Write text to the cursor point in the compose surface.\nexport async function insertText(text: string) {\n  try {\n    Office.context.mailbox.item?.body.setSelectedDataAsync(\n      text,\n      { coercionType: Office.CoercionType.Text },\n      (asyncResult: Office.AsyncResult<void>) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          throw asyncResult.error.message;\n        }\n      }\n    );\n  } catch (error) {\n    console.log(\"Error: \" + error);\n  }\n}\n\n// get Mail Details\nexport async function getMailDetails(\n  callback: (data: { \n    subject: string; \n    sender: string; \n    body: string; \n    user_email: string;\n    recipients: string[];\n    cc: string[];\n  }) => void\n) {\n  console.log(\"getMailDetails\");\n\n  Office.context.mailbox.item.subject.getAsync((subjectResult) => {\n    if (subjectResult.status === Office.AsyncResultStatus.Failed) {\n      console.error(\"Failed to get subject:\", subjectResult.error.message);\n      return;\n    }\n\n    const subject = subjectResult.value;\n\n    Office.context.mailbox.item.from.getAsync((fromResult) => {\n      if (fromResult.status === Office.AsyncResultStatus.Failed) {\n        console.error(\"Failed to get sender:\", fromResult.error.message);\n        return;\n      }\n\n      const sender = fromResult.value.emailAddress;\n      const user_email = sender;\n\n      Office.context.mailbox.item.to.getAsync((toResult) => {\n        if (toResult.status === Office.AsyncResultStatus.Failed) {\n          console.error(\"Failed to get recipients:\", toResult.error.message);\n          return;\n        }\n\n        const recipients = toResult.value.map((recipient) => recipient.emailAddress);\n\n        Office.context.mailbox.item.cc.getAsync((ccResult) => {\n          if (ccResult.status === Office.AsyncResultStatus.Failed) {\n            console.error(\"Failed to get CC:\", ccResult.error.message);\n            return;\n          }\n\n          const cc = ccResult.value.map((recipient) => recipient.emailAddress);\n\n          Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, (bodyResult) => {\n            if (bodyResult.status === Office.AsyncResultStatus.Failed) {\n              console.error(\"Failed to get body:\", bodyResult.error.message);\n              return;\n            }\n\n            const body = bodyResult.value;\n\n            callback({ subject, sender, body, user_email, recipients, cc });\n          });\n        });\n      });\n    });\n  });\n}\n","import * as React from \"react\";\nimport { \n  Button, \n  Dialog, \n  DialogSurface, \n  Field, \n  InfoLabel, \n  Label, \n  LabelProps, \n  Spinner, \n  Textarea, \n  makeStyles,\n  Badge,\n  Text,\n  Divider,\n  Toast,\n  ToastTitle,\n  useToastController,\n  Toaster\n} from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo, FieldInfo, sendRequest } from \"../../../helpers\";\nimport { getMailDetails, insertText } from \"../taskpane\";\nimport { Pencil, FileText, X, Upload, CheckCircle2, Copy } from \"lucide-react\";\n\n/* global console, HTMLTextAreaElement, HTMLDivElement, localStorage, File, fetch, document */\n\n// API Configuration\nconst BUCKET_NAME = \"fg-chat-ocr\";\nconst OCR_API_ENDPOINT = \"https://fg.server.lavel.io/outlook/ocr-detect\";\nconst PRESIGNED_URL_ENDPOINT = \"https://fg.server.lavel.io/generate_presigned_upload_url\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  answer_dialog: {\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n  dialog_field: {\n    fontWeight: 600,\n    marginBottom: \"15px\",\n  },\n  button_send: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n  spinner: {\n    width: \"75%\",\n  },\n  customLoadingOverlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(255, 255, 255, 0.8)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    zIndex: 9999,\n  },\n  loadingText: {\n    marginTop: \"10px\",\n    fontSize: \"14px\",\n    fontWeight: 600,\n  },\n  pencil: {\n    marginLeft: \"2px\",\n    marginRight: \"4px\",\n  },\n  dropZone: {\n    border: \"2px dashed #ccc\",\n    borderRadius: \"4px\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    marginBottom: \"15px\",\n    cursor: \"pointer\",\n    transition: \"all 0.3s ease\",\n  },\n  dropZoneActive: {\n    border: \"2px dashed #0078d4\",\n    backgroundColor: \"rgba(0, 120, 212, 0.05)\",\n  },\n  dropZoneSuccess: {\n    border: \"2px dashed #107c10\",\n    backgroundColor: \"rgba(16, 124, 16, 0.05)\",\n  },\n  filePreview: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"8px 12px\",\n    backgroundColor: \"#f3f2f1\",\n    borderRadius: \"4px\",\n    marginBottom: \"15px\",\n  },\n  fileIcon: {\n    marginRight: \"8px\",\n    color: \"#0078d4\",\n  },\n  fileName: {\n    flex: 1,\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n  },\n  removeButton: {\n    cursor: \"pointer\",\n    color: \"#605e5c\",\n    \"&:hover\": {\n      color: \"#d13438\",\n    },\n  },\n  copyButton: {\n    cursor: \"pointer\",\n    color: \"#605e5c\",\n    marginRight: \"8px\",\n    \"&:hover\": {\n      color: \"#0078d4\",\n    },\n  },\n  divider: {\n    margin: \"15px 0\",\n  },\n  fileUploadInfo: {\n    marginBottom: \"10px\",\n    fontSize: \"12px\",\n    color: \"#605e5c\",\n  },\n  ocrCompletedMessage: {\n    color: \"green\",\n    display: \"block\",\n    marginTop: \"5px\",\n  },\n  checkIcon: {\n    verticalAlign: \"middle\",\n    marginRight: \"5px\",\n  },\n  hiddenInput: {\n    display: \"none\",\n  }\n});\n\nconst TabAnswer = () => {\n  const styles = useStyles();\n\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" }); // dialog form\n  const [showSpinner, setShowSpinner] = React.useState<boolean>(false); // spinner\n  const [showCustomLoading, setShowCustomLoading] = React.useState<boolean>(false); // custom loading overlay\n\n  const [answerValue, setAnswerValue] = React.useState<FieldInfo>({ current: \"\", state: \"none\" }); // answer field value\n  // Store OCR results for each document separately\n  const [documentTexts, setDocumentTexts] = React.useState<{[key: string]: string}>({});\n  // Combined text input for all documents - used for display and answer generation\n  const [textInput, setTextInput] = React.useState<string>(\"\");\n  const [isDragging, setIsDragging] = React.useState<boolean>(false);\n  const [uploadedFiles, setUploadedFiles] = React.useState<File[]>([]);\n  const [isUploading, setIsUploading] = React.useState<boolean>(false);\n  const [isOcrProcessing, setIsOcrProcessing] = React.useState<boolean>(false);\n  const [ocrCompleted, setOcrCompleted] = React.useState<boolean>(false);\n  // Track file names for OCR processing - used in the processOCR function\n  const [fileNames, setFileNames] = React.useState<string[]>([]);\n\n  const dropZoneRef = React.useRef<HTMLDivElement>(null);\n  const { dispatchToast } = useToastController();\n\n  const def_answer = \"Eingeben..\";\n\n  React.useEffect(() => {\n    const getStartData = async () => {\n      var answer = localStorage.getItem(\"answer\"); // load last answer from storage\n\n      // set default value\n      if (!answer || answer == \"\") {\n        answer = def_answer;\n      }\n\n      setAnswerValue({ current: answer, state: \"none\" });\n      \n      // Clear any previous OCR data when component mounts\n      setTextInput(\"\");\n      setDocumentTexts({});\n      setUploadedFiles([]);\n      setOcrCompleted(false);\n      setFileNames([]);\n    };\n\n    getStartData(); // get Start Data\n  }, []);\n\n  // validate answer field\n  const ValidateField = (): boolean => {\n    let valid = true;\n    var answer = answerValue.current ?? \"\";\n\n    // set default value\n    if (answer == \" \") {\n      answer = def_answer;\n      localStorage.setItem(\"answer\", answer); // save\n    }\n\n    answer = answer.trim();\n\n    if (answer == \"\") {\n      setAnswerValue({ current: answer, state: \"error\" });\n      valid = false;\n    } else {\n      setAnswerValue({ current: answer, state: \"none\" });\n    }\n\n    return valid;\n  };\n\n  // change answer value\n  const handleChangeValue = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = event.target.value;\n    setAnswerValue({ ...answerValue, current: value });\n    setTextInput(value); // Update textInput state as well\n  };\n\n  // Handle file drop events\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const newFiles = Array.from(e.dataTransfer.files);\n      const validFiles = newFiles.filter((file) => file.type === \"application/pdf\");\n      const invalidFiles = newFiles.length - validFiles.length;\n      \n      if (invalidFiles > 0) {\n        setShowDialog({\n          show: true,\n          text: `${invalidFiles} Datei(en) wurden ignoriert. Nur PDF-Dateien werden unterstützt.`,\n        });\n      }\n      \n      if (validFiles.length > 0) {\n        const updatedFiles = [...uploadedFiles, ...validFiles].slice(0, 5);\n        setUploadedFiles(updatedFiles);\n        setOcrCompleted(false);\n        \n        if (uploadedFiles.length + validFiles.length > 5) {\n          setShowDialog({ show: true, text: \"Maximal 5 Dateien können hochgeladen werden.\" });\n        }\n      }\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const newFiles = Array.from(e.target.files);\n      const validFiles = newFiles.filter((file) => file.type === \"application/pdf\");\n      const invalidFiles = newFiles.length - validFiles.length;\n      \n      if (invalidFiles > 0) {\n        setShowDialog({\n          show: true,\n          text: `${invalidFiles} Datei(en) wurden ignoriert. Nur PDF-Dateien werden unterstützt.`,\n        });\n      }\n      \n      if (validFiles.length > 0) {\n        const updatedFiles = [...uploadedFiles, ...validFiles].slice(0, 5);\n        setUploadedFiles(updatedFiles);\n        setOcrCompleted(false);\n        \n        if (uploadedFiles.length + validFiles.length > 5) {\n          setShowDialog({ show: true, text: \"Maximal 5 Dateien können hochgeladen werden.\" });\n        }\n      }\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    const fileToRemove = uploadedFiles[index];\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles.splice(index, 1);\n    setUploadedFiles(updatedFiles);\n    \n    // Remove the document text for this file\n    if (fileToRemove) {\n      const updatedDocumentTexts = { ...documentTexts };\n      delete updatedDocumentTexts[fileToRemove.name];\n      setDocumentTexts(updatedDocumentTexts);\n      \n      // Update the combined text input\n      updateCombinedText(updatedFiles, updatedDocumentTexts);\n    }\n    \n    // Reset OCR status if all files are removed\n    if (updatedFiles.length === 0) {\n      setOcrCompleted(false);\n      setFileNames([]);\n      setTextInput(\"\");\n      setDocumentTexts({});\n    }\n  };\n  \n  // Helper function to update the combined text from all documents\n  const updateCombinedText = (files: File[], texts: { [key: string]: string }) => {\n    const combinedText = files\n      .map((file) => texts[file.name] || \"\")\n      .filter((text) => text.trim() !== \"\")\n      .join(\"\\n\\n\");\n    setTextInput(combinedText);\n  };\n\n  // Copy OCR text to clipboard for a specific document\n  const copyOcrText = (index: number) => {\n    const file = uploadedFiles[index];\n    const fileName = file ? file.name : \"\";\n    const textToCopy = fileName && documentTexts[fileName] ? documentTexts[fileName] : \"\";\n    \n    // Ensure custom loading is hidden when copying text\n    setShowCustomLoading(false);\n    \n    if (textToCopy && textToCopy.trim() !== \"\") {\n      // Use document.execCommand as a fallback for Office Add-ins environment\n      try {\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = textToCopy;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(textArea);\n        // Show success toast\n        dispatchToast(\n          <Toast>\n            <ToastTitle media={<CheckCircle2 color=\"green\" />}>Text in die Zwischenablage kopiert</ToastTitle>\n          </Toast>,\n          { position: \"top\", timeout: 3000 }\n        );\n      } catch (error) {\n        console.error(\"Error copying text to clipboard:\", error);\n        setShowDialog({ show: true, text: `Fehler beim Kopieren des Textes: ${error.message}` });\n      }\n    } else {\n      setShowDialog({ show: true, text: \"Kein OCR-Text für dieses Dokument verfügbar\" });\n    }\n  };\n\n  const triggerFileInput = () => {\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.click();\n    }\n  };\n\n  // Upload files to S3 using presigned URLs and trigger OCR processing\n  const uploadFilesToS3 = async () => {\n    if (uploadedFiles.length === 0) return;\n    \n    setIsUploading(true);\n    setIsOcrProcessing(true);\n    \n    try {\n      // Upload each file to S3 using presigned URLs\n      const newFileNames = [];\n      const newFileUuids = [];\n      const newFileTypes = [];\n      \n      for (const file of uploadedFiles) {\n        // Get presigned URL from the server\n        const presignedUrlResponse = await fetch(PRESIGNED_URL_ENDPOINT, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: localStorage.getItem(\"apiKey\") || \"\"\n          },\n          body: JSON.stringify({\n            filename: file.name,\n            content_type: file.type,\n            bucket_name: BUCKET_NAME,\n          }),\n        });\n        \n        if (!presignedUrlResponse.ok) {\n          throw new Error(`Failed to get presigned URL: ${presignedUrlResponse.statusText}`);\n        }\n        \n        const presignedData = await presignedUrlResponse.json();\n        // Upload file using the presigned URL\n        const uploadResponse = await fetch(presignedData.url, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": file.type,\n          },\n          body: file,\n        });\n        \n        if (!uploadResponse.ok) {\n          throw new Error(`Failed to upload ${file.name}: ${uploadResponse.statusText}`);\n        }\n        \n        // Store the file information returned from the server\n        newFileNames.push(presignedData.filename);\n        newFileUuids.push(presignedData.uuid);\n        newFileTypes.push(presignedData.filetype);\n      }\n      \n      setFileNames(newFileNames);\n      setIsUploading(false);\n      \n      // Trigger OCR processing with the new file information\n      await triggerOcrProcessing(newFileUuids.map((uuid, index) => `${uuid}${newFileTypes[index]}`));\n    } catch (error) {\n      console.error(\"Error uploading files to S3:\", error);\n      setShowDialog({ show: true, text: `Fehler beim Hochladen: ${error.message}` });\n      setIsUploading(false);\n      setIsOcrProcessing(false);\n    }\n  };\n  \n  // Trigger OCR processing on the backend\n  const triggerOcrProcessing = async (fileNames: string[]) => {\n    try {\n      const apiKey: string = localStorage.getItem(\"apiKey\") || \"\";\n      \n      if (apiKey === \"\") {\n        setShowDialog({ show: true, text: \"API-Schlüssel nicht angegeben\" });\n        setIsOcrProcessing(false);\n        return;\n      }\n      \n      // Prepare files array according to OCRRequest schema\n      const files = fileNames.map((filename) => ({\n        filename,\n        bucket: BUCKET_NAME,\n      }));\n      \n      const response = await fetch(OCR_API_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: apiKey,\n        },\n        body: JSON.stringify({\n          files: files,\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.detail || \"OCR processing failed\");\n      }\n      \n      // Update text input with OCR results if available\n      if (data.documents && data.documents.length > 0) {\n        // Store text for each document separately\n        const updatedDocumentTexts = { ...documentTexts };\n        \n        // Map each document to its file using the index\n        data.documents.forEach((doc: { text: string }, index: number) => {\n          if (index < fileNames.length && doc.text) {\n            // Use the original filename (without UUID) as the key\n            const originalFileName = uploadedFiles[index]?.name || `Document ${index + 1}`;\n            updatedDocumentTexts[originalFileName] = doc.text;\n          }\n        });\n        \n        setDocumentTexts(updatedDocumentTexts);\n        \n        // Update the combined text input\n        const combinedText = uploadedFiles\n          .map((file) => updatedDocumentTexts[file.name] || \"\")\n          .filter((text) => text.trim() !== \"\")\n          .join(\"\\n\\n\");\n        \n        setTextInput(combinedText);\n      }\n      \n      setIsOcrProcessing(false);\n      setOcrCompleted(true);\n      \n      // Show success toast\n      dispatchToast(\n        <Toast>\n          <ToastTitle media={<CheckCircle2 color=\"green\" />}>OCR erfolgreich abgeschlossen</ToastTitle>\n        </Toast>,\n        { position: \"top\", timeout: 5000 }\n      );\n      \n    } catch (error) {\n      console.error(\"Error processing OCR:\", error);\n      setShowDialog({ show: true, text: `OCR-Fehler: ${error.message}` });\n      setIsOcrProcessing(false);\n    }\n  };\n\n  // React to file uploads\n  React.useEffect(() => {\n    if (uploadedFiles.length > 0 && !isUploading && !isOcrProcessing && !ocrCompleted) {\n      uploadFilesToS3();\n    }\n  }, [uploadedFiles, isUploading, isOcrProcessing, ocrCompleted]);\n\n  // button - get full answer\n  const onButtonSaveClick = () => {\n    if (!ValidateField()) {\n      return;\n    }\n    \n    // Hide any previous custom loading overlay\n    setShowCustomLoading(false);\n\n    // Save both answer value and text input\n    localStorage.setItem(\"answer\", answerValue.current); // save\n    setTextInput(answerValue.current); // Ensure textInput is synced\n\n    var apiKey: string = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n\n    if (apiKey == \"\") {\n      setShowDialog({ show: true, text: \"API-Schlüssel nicht angegeben\" });\n      return;\n    }\n    \n    // Check if we need to wait for OCR processing\n    if (uploadedFiles.length > 0 && !ocrCompleted) {\n      setShowDialog({\n        show: true,\n        text: \"Bitte warten Sie, bis die OCR-Verarbeitung der PDF-Dateien abgeschlossen ist, bevor Sie eine Antwort generieren.\",\n      });\n      return;\n    }\n\n    // get Mail Details\n    getMailDetails((data) => {\n      setShowSpinner(true);\n      setShowCustomLoading(true);\n\n      var user_input: string = answerValue.current;\n\n      console.log(\"subject = \" + data.subject);\n      console.log(\"sender = \" + data.sender);\n      console.log(\"body = \" + data.body);\n      console.log(\"recipients = \" + JSON.stringify(data.recipients));\n      console.log(\"cc = \" + JSON.stringify(data.cc));\n      console.log(\"user_input = \" + user_input);\n      console.log(\"user_email = \" + data.user_email);\n      console.log(\"files = \" + (uploadedFiles.length > 0 ? uploadedFiles.map((f) => f.name).join(\", \") : \"none\"));\n\n      // send Request\n      // We don't need to send the actual files anymore, just the extracted text\n      let filesToSend = undefined;\n      \n      // Create a document texts object to pass to the API\n      const documentTextsList = [];\n      if (uploadedFiles.length > 0) {\n        for (const file of uploadedFiles) {\n          // Only add documents that have text content\n          if (documentTexts[file.name] && documentTexts[file.name].trim() !== \"\") {\n            documentTextsList.push({\n              filename: file.name,\n              text: documentTexts[file.name],\n            });\n          }\n        }\n      }\n      \n      sendRequest(\n        \"/outlook/generate-email\", \n        apiKey, \n        data.subject, \n        data.sender, \n        data.body, \n        user_input, \n        data.user_email, \n        data.recipients, \n        data.cc,\n        filesToSend,\n        documentTextsList\n      )\n        .then(async (response) => {\n          setShowSpinner(false);\n          setShowCustomLoading(false);\n\n          console.log(\"response = \" + JSON.stringify(response, null, 2));\n\n          // show error dialog\n          if (response.status != \"success\") {\n            setShowDialog({ show: true, text: response.detail });\n            return;\n          }\n\n          insertText(response.email_text); // Write text to the cursor point in the compose surface.\n        })\n        .catch((error) => {\n          setShowSpinner(false);\n          setShowCustomLoading(false);\n          setShowDialog({ show: true, text: `Anfragefehler: ${error}` }); // show error dialog\n        });\n    });\n  };\n\n  // result dialog event\n  const handleResultDialog = () => {\n    setShowSpinner(false);\n    setShowDialog({ ...showDialog, show: false });\n  };\n\n  return (\n    <div className={styles.root} role=\"tabpanel\" aria-labelledby=\"Settings\">\n      <Toaster />\n      \n      {showCustomLoading && (\n        <div className={styles.customLoadingOverlay}>\n          <Spinner size=\"large\" />\n          <div className={styles.loadingText}>Antwort wird generiert...</div>\n        </div>\n      )}\n      \n      {(showSpinner || isUploading || isOcrProcessing) && (\n        <Dialog defaultOpen={true}>\n          <DialogSurface className={styles.spinner}>\n            <Spinner \n              autoFocus \n              labelPosition=\"after\" \n              label={\n                isUploading\n                  ? \"Dateien werden hochgeladen...\"\n                  : isOcrProcessing\n                    ? \"OCR-Verarbeitung läuft...\"\n                    : \"Wird geladen...\"\n              }\n            />\n          </DialogSurface>\n        </Dialog>\n      )}\n\n      {showDialog.show && (\n        <DialogForm\n          type=\"alert\"\n          title=\"Fehler\"\n          content={showDialog.text}\n          closeName=\"OK\"\n          showPrimary={false}\n          onResultDialog={handleResultDialog}\n        />\n      )}\n\n      <div className={styles.answer_dialog}>\n        <Field\n          className={styles.dialog_field}\n          label={\n            <>\n              <Pencil size={18} className={styles.pencil} /> Nutzer Input\n            </>\n          }\n          validationState={answerValue.state}\n          validationMessage=\"Kurze Antwort eingeben\"\n          required\n        >\n          <Textarea\n            value={answerValue.current}\n            rows={10}\n            placeholder=\"Kurzen Text eingeben..\"\n            size=\"large\"\n            resize=\"vertical\"\n            onChange={handleChangeValue}\n            lang=\"de\"\n          />\n        </Field>\n\n        <Divider className={styles.divider} />\n\n        <Text className={styles.fileUploadInfo}>\n          Laden Sie bis zu 5 PDF-Dateien hoch, um Text zu extrahieren und in die Anfrage einzubeziehen\n        </Text>\n\n        <div \n          ref={dropZoneRef}\n          className={`${styles.dropZone} ${isDragging ? styles.dropZoneActive : \"\"} ${ocrCompleted ? styles.dropZoneSuccess : \"\"}`}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n          onClick={triggerFileInput}\n        >\n          <Upload size={24} />\n          <p>\n            PDF-Dateien hierher ziehen oder klicken zum Auswählen ({uploadedFiles.length}/5)\n            {ocrCompleted && uploadedFiles.length > 0 && (\n              <span className={styles.ocrCompletedMessage}>\n                <CheckCircle2 size={16} className={styles.checkIcon} />\n                OCR abgeschlossen\n              </span>\n            )}\n          </p>\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            accept=\"application/pdf\"\n            className={styles.hiddenInput}\n            multiple\n            onChange={handleFileSelect}\n            aria-label=\"PDF-Datei auswählen\"\n          />\n        </div>\n        \n        {uploadedFiles.length > 0 && (\n          <div style={{ marginBottom: '15px' }}>\n            {uploadedFiles.map((file, index) => (\n              <div key={index} className={styles.filePreview}>\n                <FileText size={20} className={styles.fileIcon} />\n                <span className={styles.fileName}>{file.name}</span>\n                <Copy size={18} className={styles.copyButton} onClick={() => copyOcrText(index)} aria-label=\"Copy OCR text\" />\n                <X size={18} className={styles.removeButton} onClick={() => handleRemoveFile(index)} aria-label=\"Remove file\" />\n              </div>\n            ))}\n          </div>\n        )}\n\n        <Button className={styles.button_send} appearance=\"primary\" onClick={onButtonSaveClick}>\n          Antwort generieren\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TabAnswer;\n","import * as React from \"react\";\nimport { Button, Field, Input, makeStyles } from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo, FieldInfo } from \"../../../helpers\";\n\n/* global HTMLInputElement, localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  saving_dialog: {\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n  dialog_field: {\n    fontWeight: 600,\n    marginBottom: \"15px\",\n  },\n  dialog_add: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n});\n\nconst TabSettings = () => {\n  const styles = useStyles();\n\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" }); // dialog form\n  const [keyValue, setKeyValue] = React.useState<FieldInfo>({ current: \"\", state: \"none\" }); // apiKey field value\n\n  React.useEffect(() => {\n    const getStartData = async () => {\n      var apiKey = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n      setKeyValue({ current: apiKey, state: \"none\" });\n    };\n\n    getStartData(); // get Start Data\n  }, []);\n\n  // validate field\n  const ValidateField = (): boolean => {\n    let valid = true;\n    var apiKey = keyValue.current.trim();\n    setKeyValue({ ...keyValue, current: apiKey, state: \"none\" });\n    return valid;\n  };\n\n  // change input value\n  const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setKeyValue({ ...keyValue, current: event.target.value });\n  };\n\n  // button - save api key\n  const onButtonSaveClick = () => {\n    if (!ValidateField()) {\n      return;\n    }\n\n    localStorage.setItem(\"apiKey\", keyValue.current); // save\n\n    setShowDialog({ show: true, text: \"Änderungen gespeichert\" });\n  };\n\n  // result dialog event\n  const handleResultDialog = () => {\n    setShowDialog({ ...showDialog, show: false });\n  };\n\n  return (\n    <div className={styles.root} role=\"tabpanel\" aria-labelledby=\"Settings\">\n      {showDialog.show && (\n        <DialogForm\n          type=\"modal\"\n          title=\"Info\"\n          content={showDialog.text}\n          closeName=\"OK\"\n          showPrimary={false}\n          onResultDialog={handleResultDialog}\n        />\n      )}\n\n      <div className={styles.saving_dialog}>\n        <Field\n          className={styles.dialog_field}\n          label=\"API-Schlüsselwert\"\n          validationState={keyValue.state}\n          validationMessage=\"Kopieren Sie Ihren API-Schlüsselwert und fügen Sie ihn ein\"\n          required\n        >\n          <Input value={keyValue.current} placeholder=\"z.b. outlookapi47eda17f38081e...\" onChange={handleChangeValue} />\n        </Field>\n\n        <Button className={styles.dialog_add} appearance=\"primary\" onClick={onButtonSaveClick}>\n          Speichern\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TabSettings;\n","import * as React from \"react\";\nimport { \n  Button, \n  Dialog, \n  DialogSurface, \n  Field, \n  Spinner, \n  makeStyles,\n  Text,\n  Divider,\n  Toast,\n  ToastTitle,\n  useToastController,\n  Toaster,\n  Dropdown,\n  Option,\n  Input,\n  Card,\n  CardHeader\n} from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo } from \"../../../helpers\";\nimport { getMailDetails } from \"../taskpane\";\nimport { CheckCircle2, ArrowRight } from \"lucide-react\";\n\n/* global console, localStorage, fetch, Office */\n\n// API Configuration\nconst COMBINED_ACTIVITY_ENDPOINT = \"/outlook/combined-activity-data\";\nconst CREATE_ACTIVITY_ENDPOINT = \"/outlook/create-activity\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  formContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"15px\",\n  },\n  button: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n  spinner: {\n    width: \"75%\",\n  },\n  customLoadingOverlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(255, 255, 255, 0.8)\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    zIndex: 9999,\n  },\n  loadingText: {\n    marginTop: \"10px\",\n    fontSize: \"14px\",\n    fontWeight: 600,\n  },\n  divider: {\n    margin: \"15px 0\",\n  },\n  stepContainer: {\n    marginBottom: \"20px\",\n  },\n  stepHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: \"10px\",\n  },\n  stepNumber: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"24px\",\n    height: \"24px\",\n    borderRadius: \"50%\",\n    backgroundColor: \"#0078d4\",\n    color: \"white\",\n    marginRight: \"10px\",\n    fontSize: \"14px\",\n    fontWeight: \"bold\",\n  },\n  stepTitle: {\n    fontWeight: \"bold\",\n    fontSize: \"16px\",\n  },\n  suggestionCard: {\n    marginBottom: \"15px\",\n    border: \"1px solid #edebe9\",\n    boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.05)\",\n  },\n  cardHeader: {\n    paddingBottom: \"8px\",\n  },\n  cardContent: {\n    padding: \"0 16px 16px 16px\",\n  },\n  fieldGroup: {\n    marginBottom: \"12px\",\n  },\n  fieldLabel: {\n    fontWeight: \"600\",\n    marginBottom: \"4px\",\n    fontSize: \"12px\",\n    color: \"#605e5c\",\n  },\n  fieldValue: {\n    fontSize: \"14px\",\n    padding: \"8px\",\n    backgroundColor: \"#f3f2f1\",\n    borderRadius: \"4px\",\n  },\n  nextStepButton: {\n    marginTop: \"10px\",\n  },\n  assignedUserField: {\n    marginTop: \"15px\",\n  }\n});\n\nconst TabActivity = () => {\n  const styles = useStyles();\n  const { dispatchToast } = useToastController();\n\n  // State for dialog and loading\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" });\n  const [showSpinner, setShowSpinner] = React.useState<boolean>(false);\n  const [showCustomLoading, setShowCustomLoading] = React.useState<boolean>(false);\n\n  // State for activity data\n  const [currentStep, setCurrentStep] = React.useState<number>(1);\n  const [suggestedTitle, setSuggestedTitle] = React.useState<string>(\"\");\n  const [suggestedCategory, setSuggestedCategory] = React.useState<string>(\"\");\n  const [suggestedFolderId, setSuggestedFolderId] = React.useState<string>(\"\");\n  const [categories, setCategories] = React.useState<string[]>([]);\n  \n  // Editable fields\n  const [title, setTitle] = React.useState<string>(\"\");\n  const [category, setCategory] = React.useState<string>(\"\");\n  const [assignedUser, setAssignedUser] = React.useState<string>(\"\");\n  const [folderPath, setFolderPath] = React.useState<string>(\"\");\n\n  // Get email details and suggestions\n  React.useEffect(() => {\n    const getSuggestions = () => {\n      try {\n        setShowSpinner(true);\n        \n        // Get email details using callback\n        getMailDetails((mailDetails) => {\n          if (!mailDetails) {\n            setShowDialog({ \n              show: true, \n              text: \"Keine E-Mail ausgewählt. Bitte wählen Sie eine E-Mail aus, um fortzufahren.\" \n            });\n            setShowSpinner(false);\n            return;\n          }\n\n        // Get API key from localStorage\n        const apiKey = localStorage.getItem(\"apiKey\");\n        if (!apiKey) {\n          setShowDialog({ \n            show: true, \n            text: \"Kein API-Schlüssel gefunden. Bitte geben Sie einen API-Schlüssel in den Einstellungen ein.\" \n          });\n          setShowSpinner(false);\n          return;\n        }\n\n        // Prepare request body\n        const requestBody = {\n          messages: [\n            {\n              subject: mailDetails.subject || \"\",\n              body: mailDetails.body || \"\",\n              sender: mailDetails.sender || \"\",\n              recipients: mailDetails.recipients || [],\n              cc: mailDetails.cc || [],\n              thread_body: mailDetails.body || \"\",\n              raw_content: null\n            }\n          ]\n        };\n\n          // Call the combined activity data endpoint\n          fetch(`https://fg.server.lavel.io${COMBINED_ACTIVITY_ENDPOINT}`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": apiKey\n            },\n            body: JSON.stringify(requestBody)\n          })\n          .then(response => {\n            if (!response.ok) {\n              return response.json().then(errorData => {\n                throw new Error(errorData.detail || \"Fehler beim Abrufen der Aktivitätsdaten\");\n              });\n            }\n            return response.json();\n          })\n          .then(data => {\n        \n            // Update state with suggestions\n            setSuggestedTitle(data.suggested_title || \"\");\n            setSuggestedCategory(data.category || \"\");\n            setSuggestedFolderId(data.folder_id || \"\");\n            setCategories(data.categories || []);\n            \n            // Set initial values for editable fields\n            setTitle(data.suggested_title || \"\");\n            setCategory(data.category || \"\");\n            setFolderPath(data.folder_id ? `${data.folder_id}` : \"\");\n            \n            // Get user email from localStorage or use sender email\n            const userEmail = localStorage.getItem(\"userEmail\") || mailDetails.user_email || \"\";\n            setAssignedUser(userEmail);\n            \n            setShowSpinner(false);\n          })\n          .catch(error => {\n            console.error(\"Error getting suggestions:\", error);\n            setShowDialog({ \n              show: true, \n              text: `Fehler beim Abrufen der Vorschläge: ${error.message}` \n            });\n            setShowSpinner(false);\n          });\n        });\n      } catch (error) {\n        console.error(\"Error in getSuggestions:\", error);\n        setShowDialog({ \n          show: true, \n          text: `Fehler: ${error.message}` \n        });\n        setShowSpinner(false);\n      }\n    };\n\n    getSuggestions();\n  }, []);\n\n  // Create activity\n  const createActivity = () => {\n    try {\n      setShowCustomLoading(true);\n      \n      // Get email details using callback\n      getMailDetails((mailDetails) => {\n        if (!mailDetails) {\n          setShowDialog({ \n            show: true, \n            text: \"Keine E-Mail ausgewählt. Bitte wählen Sie eine E-Mail aus, um fortzufahren.\" \n          });\n          setShowCustomLoading(false);\n          return;\n        }\n\n      // Get API key from localStorage\n      const apiKey = localStorage.getItem(\"apiKey\");\n      if (!apiKey) {\n        setShowDialog({ \n          show: true, \n          text: \"Kein API-Schlüssel gefunden. Bitte geben Sie einen API-Schlüssel in den Einstellungen ein.\" \n        });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      // Validate required fields\n      if (!title.trim()) {\n        setShowDialog({ show: true, text: \"Bitte geben Sie einen Titel ein.\" });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      if (!category.trim()) {\n        setShowDialog({ show: true, text: \"Bitte wählen Sie eine Kategorie aus.\" });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      if (!assignedUser.trim()) {\n        setShowDialog({ show: true, text: \"Bitte geben Sie einen zugewiesenen Benutzer ein.\" });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      if (!folderPath.trim()) {\n        setShowDialog({ show: true, text: \"Bitte geben Sie einen Ordnerpfad ein.\" });\n        setShowCustomLoading(false);\n        return;\n      }\n\n      // Prepare request body\n      const requestBody = {\n        title: title,\n        category: category,\n        assigned_user: assignedUser,\n        messages: [\n          {\n            subject: mailDetails.subject || \"\",\n            body: mailDetails.body || \"\",\n            sender: mailDetails.sender || \"\",\n            recipients: mailDetails.recipients || [],\n            cc: mailDetails.cc || [],\n            thread_body: mailDetails.body || \"\"\n          }\n        ],\n        folder_path: folderPath,\n        shouldCreateActivity: true\n      };\n\n        // Call the create activity endpoint\n        fetch(`https://fg.server.lavel.io${CREATE_ACTIVITY_ENDPOINT}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": apiKey\n          },\n          body: JSON.stringify(requestBody)\n        })\n        .then(response => {\n          if (!response.ok) {\n            return response.json().then(errorData => {\n              throw new Error(errorData.detail || \"Fehler beim Erstellen der Aktivität\");\n            });\n          }\n          return response.json();\n        })\n        .then(data => {\n      \n          // Show success toast\n          dispatchToast(\n            <Toast>\n              <ToastTitle media={<CheckCircle2 color=\"green\" />}>\n                Aktivität erfolgreich erstellt\n              </ToastTitle>\n            </Toast>,\n            { position: \"top\", timeout: 3000 }\n          );\n          \n          // Reset form\n          setCurrentStep(1);\n          setSuggestedTitle(\"\");\n          setSuggestedCategory(\"\");\n          setSuggestedFolderId(\"\");\n          setTitle(\"\");\n          setCategory(\"\");\n          setAssignedUser(\"\");\n          setFolderPath(\"\");\n          \n          setShowCustomLoading(false);\n        })\n        .catch(error => {\n          console.error(\"Error creating activity:\", error);\n          setShowDialog({ \n            show: true, \n            text: `Fehler beim Erstellen der Aktivität: ${error.message}` \n          });\n          setShowCustomLoading(false);\n        });\n      });\n    } catch (error) {\n      console.error(\"Error in createActivity:\", error);\n      setShowDialog({ \n        show: true, \n        text: `Fehler: ${error.message}` \n      });\n      setShowCustomLoading(false);\n    }\n  };\n\n  // Go to next step\n  const goToNextStep = () => {\n    setCurrentStep(2);\n  };\n\n  // Go back to previous step\n  const goToPreviousStep = () => {\n    setCurrentStep(1);\n  };\n\n  return (\n    <div className={styles.root}>\n      {showSpinner && (\n        <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"20px\" }}>\n          <Spinner className={styles.spinner} label=\"Lade Vorschläge...\" />\n        </div>\n      )}\n\n      {showCustomLoading && (\n        <div className={styles.customLoadingOverlay}>\n          <Spinner size=\"large\" />\n          <div className={styles.loadingText}>Aktivität wird erstellt...</div>\n        </div>\n      )}\n\n      {!showSpinner && (\n        <div className={styles.formContainer}>\n          {currentStep === 1 && (\n            <div className={styles.stepContainer}>\n              <div className={styles.stepHeader}>\n                <div className={styles.stepNumber}>1</div>\n                <div className={styles.stepTitle}>Aktivitätsvorschlag prüfen</div>\n              </div>\n              \n              <Text>\n                Basierend auf der ausgewählten E-Mail wurde ein Aktivitätsvorschlag erstellt.\n                Überprüfen Sie die Informationen und klicken Sie auf \"Weiter\", um fortzufahren.\n              </Text>\n              \n              <Divider className={styles.divider} />\n              \n              <Card className={styles.suggestionCard}>\n                <CardHeader className={styles.cardHeader} header={<Text weight=\"semibold\">Vorgeschlagene Aktivität</Text>} />\n                <div className={styles.cardContent}>\n                  <div className={styles.fieldGroup}>\n                    <div className={styles.fieldLabel}>Titel</div>\n                    <div className={styles.fieldValue}>{suggestedTitle}</div>\n                  </div>\n                  \n                  <div className={styles.fieldGroup}>\n                    <div className={styles.fieldLabel}>Kategorie</div>\n                    <div className={styles.fieldValue}>{suggestedCategory}</div>\n                  </div>\n                  \n                  <div className={styles.fieldGroup}>\n                    <div className={styles.fieldLabel}>Ordner ID</div>\n                    <div className={styles.fieldValue}>{suggestedFolderId}</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Button \n                appearance=\"primary\" \n                className={styles.nextStepButton}\n                onClick={goToNextStep}\n                icon={<ArrowRight />}\n              >\n                Weiter zur Bearbeitung\n              </Button>\n            </div>\n          )}\n          \n          {currentStep === 2 && (\n            <div className={styles.stepContainer}>\n              <div className={styles.stepHeader}>\n                <div className={styles.stepNumber}>2</div>\n                <div className={styles.stepTitle}>Aktivität bearbeiten und erstellen</div>\n              </div>\n              \n              <Text>\n                Bearbeiten Sie die Aktivitätsinformationen nach Bedarf und klicken Sie auf \"Aktivität erstellen\",\n                um die Aktivität zu erstellen.\n              </Text>\n              \n              <Divider className={styles.divider} />\n              \n              <Field label=\"Titel\" required>\n                <Input \n                  value={title} \n                  onChange={(e) => setTitle(e.target.value)} \n                  placeholder=\"Aktivitätstitel\"\n                />\n              </Field>\n              \n              <Field label=\"Kategorie\" required>\n                <Dropdown\n                  value={category}\n                  onOptionSelect={(_, data) => setCategory(data.optionValue || \"\")}\n                  placeholder=\"Kategorie auswählen\"\n                >\n                  {categories.map((cat) => (\n                    <Option key={cat} value={cat}>\n                      {cat}\n                    </Option>\n                  ))}\n                </Dropdown>\n              </Field>\n              \n              <Field label=\"Ordnerpfad\" required>\n                <Input \n                  value={folderPath} \n                  onChange={(e) => setFolderPath(e.target.value)} \n                  placeholder=\"z.B. 301 Projektname\"\n                />\n              </Field>\n              \n              <Field label=\"Zugewiesener Benutzer\" required className={styles.assignedUserField}>\n                <Input \n                  value={assignedUser} \n                  onChange={(e) => setAssignedUser(e.target.value)} \n                  placeholder=\"E-Mail-Adresse\"\n                />\n              </Field>\n              \n              <Divider className={styles.divider} />\n              \n              <div style={{ display: \"flex\", gap: \"10px\" }}>\n                <Button \n                  appearance=\"secondary\" \n                  onClick={goToPreviousStep}\n                >\n                  Zurück\n                </Button>\n                \n                <Button \n                  appearance=\"primary\" \n                  onClick={createActivity}\n                >\n                  Aktivität erstellen\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {showDialog.show && (\n        <Dialog modalType=\"alert\" open={showDialog.show}>\n          <DialogSurface>\n            <DialogForm\n              title=\"Hinweis\"\n              message={showDialog.text}\n              onClose={() => setShowDialog({ show: false, text: \"\" })}\n            />\n          </DialogSurface>\n        </Dialog>\n      )}\n      \n      <Toaster />\n    </div>\n  );\n};\n\nexport default TabActivity;\n","import * as React from \"react\";\nimport { makeStyles, Tab, TabList } from \"@fluentui/react-components\";\nimport type { SelectTabData, SelectTabEvent, TabValue } from \"@fluentui/react-components\";\nimport TabAnswer from \"./TabAnswer\";\nimport TabSettings from \"./TabSettings\";\nimport TabActivity from \"./TabActivity\";\n\n\n/* global localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    alignItems: \"flex-start\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    paddingTop: \"10px\",\n    paddingLeft: \"1px\",\n    paddingRight: \"1px\",\n  },\n  tab_menu: {\n    paddingBottom: \"20px\",\n  },\n  tab_cont: {\n    width: \"100%\",\n  },\n});\n\nexport const TabPanes = () => {\n  const styles = useStyles();\n\n  var apiKey = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n\n  const [selectedTab, setSelectedTab] = React.useState<TabValue>(apiKey == \"\" ? \"settings\" : \"answer\");\n\n  const onTabSelect = (_event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedTab(data.value);\n  };\n\n  return (\n    <div className={styles.root}>\n      <TabList className={styles.tab_menu} selectedValue={selectedTab} onTabSelect={onTabSelect}>\n        <Tab id=\"Answer\" value=\"answer\">\n          Antwort\n        </Tab>\n\n        <Tab id=\"Activity\" value=\"activity\">\n          Aktivität\n        </Tab>\n\n        <Tab id=\"Settings\" value=\"settings\">\n          Einstellungen\n        </Tab>\n      </TabList>\n\n      <div className={styles.tab_cont}>\n        {selectedTab === \"answer\" && <TabAnswer />}\n\n        {selectedTab === \"activity\" && <TabActivity />}\n\n        {selectedTab === \"settings\" && <TabSettings />}\n      </div>\n    </div>\n  );\n};\n\nexport default TabPanes;\n","import * as React from \"react\";\nimport { Divider, makeStyles } from \"@fluentui/react-components\";\nimport { TabPanes } from \"./TabPanes\";\n\n/* global */\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"100vh\",\n    maxWidth: \"370px\",\n  },\n  divider: {\n    marginTop: \"10px\",\n  },\n});\n\nconst App = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <TabPanes />\n      <Divider className={styles.divider} inset />\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./components/App\";\nimport { createLightTheme, FluentProvider } from \"@fluentui/react-components\";\nimport type { BrandVariants, Theme } from \"@fluentui/react-components\";\n\n/* global document, Office, module, require, HTMLElement */\n\n// themes designer: https://react.fluentui.dev/?path=/docs/theme-theme-designer--docs\nconst outlook: BrandVariants = {\n  10: \"#010101\",\n  20: \"#010202\",\n  30: \"#010403\",\n  40: \"#0D1C17\",\n  50: \"#0F2F25\",\n  60: \"#0E3D30\",\n  70: \"#094B3A\",\n  80: \"#005B46\",\n  90: \"#216753\",\n  100: \"#377461\",\n  110: \"#4B816F\",\n  120: \"#5F8E7D\",\n  130: \"#729B8C\",\n  140: \"#85A99C\",\n  150: \"#98B7AB\",\n  160: \"#ACC4BB\",\n};\n\nconst customTheme: Theme = {\n  ...createLightTheme(outlook),\n};\n\nconst rootElement: HTMLElement | null = document.getElementById(\"container\");\nconst root = rootElement ? createRoot(rootElement) : undefined;\n\nOffice.onReady(() => {\n  root?.render(\n    <FluentProvider theme={customTheme}>\n      <App />\n    </FluentProvider>\n  );\n});\n"],"names":["useStyles","dialog","marginTop","marginRight","marginLeft","dialog_apply","backgroundColor","props","styles","Dialog","modalType","type","defaultOpen","onOpenChange","onResultDialog","DialogSurface","className","DialogBody","DialogTitle","title","DialogContent","content","DialogActions","DialogTrigger","disableButtonEnhancement","Button","appearance","autoFocus","closeName","showPrimary","onClick","sendRequest","endpoint","apiKey","subject","sender","body","user_input","user_email","recipients","cc","_files","documentTexts","url","headers","authorization","data","messages","thread_body","raw_content","target_language","length","some","doc","text","documents","filter","trim","options","method","JSON","stringify","muteHttpExceptions","response","fetch","includes","status","detail","json","error","getMailDetails","callback","Office","context","mailbox","item","getAsync","subjectResult","AsyncResultStatus","Failed","value","from","fromResult","emailAddress","to","toResult","map","recipient","ccResult","CoercionType","Text","bodyResult","BUCKET_NAME","root","flexDirection","display","paddingLeft","paddingRight","answer_dialog","dialog_field","fontWeight","marginBottom","button_send","width","spinner","customLoadingOverlay","position","top","left","right","bottom","alignItems","justifyContent","zIndex","loadingText","fontSize","pencil","dropZone","border","borderRadius","padding","textAlign","cursor","transition","dropZoneActive","dropZoneSuccess","filePreview","fileIcon","color","fileName","flex","overflow","textOverflow","whiteSpace","removeButton","copyButton","divider","margin","fileUploadInfo","ocrCompletedMessage","checkIcon","verticalAlign","hiddenInput","showDialog","setShowDialog","show","showSpinner","setShowSpinner","showCustomLoading","setShowCustomLoading","answerValue","setAnswerValue","current","state","setDocumentTexts","textInput","setTextInput","isDragging","setIsDragging","uploadedFiles","setUploadedFiles","isUploading","setIsUploading","isOcrProcessing","setIsOcrProcessing","ocrCompleted","setOcrCompleted","fileNames","setFileNames","dropZoneRef","dispatchToast","useToastController","def_answer","answer","localStorage","getItem","updateCombinedText","files","texts","combinedText","file","name","join","triggerOcrProcessing","filename","bucket","Authorization","ok","Error","updatedDocumentTexts","forEach","index","originalFileName","Toast","ToastTitle","media","timeout","message","newFileNames","newFileUuids","newFileTypes","presignedUrlResponse","content_type","bucket_name","statusText","presignedData","uploadResponse","push","uuid","filetype","role","Toaster","Spinner","size","labelPosition","label","Field","validationState","validationMessage","required","Textarea","T","rows","placeholder","resize","onChange","event","target","lang","Divider","ref","onDragOver","e","preventDefault","onDragLeave","onDrop","dataTransfer","newFiles","Array","validFiles","invalidFiles","updatedFiles","slice","fileInput","document","getElementById","click","id","accept","multiple","style","key","textToCopy","textArea","createElement","appendChild","select","execCommand","removeChild","copyOcrText","fileToRemove","splice","handleRemoveFile","valid","setItem","ValidateField","filesToSend","documentTextsList","then","setSelectedDataAsync","coercionType","asyncResult","insertText","email_text","catch","saving_dialog","dialog_add","keyValue","setKeyValue","Input","formContainer","gap","button","stepContainer","stepHeader","stepNumber","height","stepTitle","suggestionCard","boxShadow","cardHeader","paddingBottom","cardContent","fieldGroup","fieldLabel","fieldValue","nextStepButton","assignedUserField","currentStep","setCurrentStep","suggestedTitle","setSuggestedTitle","suggestedCategory","setSuggestedCategory","suggestedFolderId","setSuggestedFolderId","categories","setCategories","setTitle","category","setCategory","assignedUser","setAssignedUser","folderPath","setFolderPath","mailDetails","requestBody","errorData","suggested_title","folder_id","userEmail","getSuggestions","Card","CardHeader","header","weight","icon","A","Dropdown","onOptionSelect","_","optionValue","cat","Option","assigned_user","folder_path","shouldCreateActivity","open","onClose","paddingTop","tab_menu","tab_cont","TabPanes","selectedTab","setSelectedTab","TabList","selectedValue","onTabSelect","_event","Tab","minHeight","maxWidth","inset","customTheme","createLightTheme","rootElement","onReady","render","FluentProvider","theme"],"sourceRoot":""}