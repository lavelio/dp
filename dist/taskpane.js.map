{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-react/./src/taskpane/components/DialogForm.tsx","webpack://office-addin-taskpane-react/./helpers.ts","webpack://office-addin-taskpane-react/./src/taskpane/components/TabAnswer.tsx","webpack://office-addin-taskpane-react/./src/taskpane/taskpane.ts","webpack://office-addin-taskpane-react/./src/taskpane/components/TabSettings.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/TabPanes.tsx","webpack://office-addin-taskpane-react/./src/taskpane/components/App.tsx","webpack://office-addin-taskpane-react/./src/taskpane/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Parser from \"html-react-parser\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogBody,\n  DialogContent,\n  DialogSurface,\n  DialogTitle,\n  DialogTrigger,\n  makeStyles,\n} from \"@fluentui/react-components\";\n\nexport interface DialogFormProps {\n  type: \"non-modal\" | \"modal\" | \"alert\";\n  title: string;\n  content: string;\n  closeName: string;\n  showPrimary: boolean;\n  onResultDialog: (result: \"ok\" | \"cancel\") => void;\n}\n\nconst useStyles = makeStyles({\n  dialog: {\n    marginTop: \"10px\",\n    marginRight: \"10px\",\n    marginLeft: \"10px\",\n  },\n  dialog_apply: {\n    backgroundColor: \"red\",\n  },\n});\n\nconst DialogForm = (props: DialogFormProps) => {\n  const styles = useStyles();\n\n  // button - confirm\n  const onButtonApplyClick = () => {\n    props.onResultDialog(\"ok\");\n  };\n\n  // button - cancel\n  const onOpenChange = () => {\n    props.onResultDialog(\"cancel\");\n  };\n\n  return (\n    <Dialog modalType={props.type} defaultOpen={true} onOpenChange={onOpenChange}>\n      <DialogSurface className={styles.dialog}>\n        <DialogBody>\n          <DialogTitle>{props.title}</DialogTitle>\n\n          <DialogContent>{Parser(props.content)}</DialogContent>\n\n          <DialogActions>\n            <DialogTrigger disableButtonEnhancement>\n              <Button appearance=\"secondary\" autoFocus>\n                {props.closeName}\n              </Button>\n            </DialogTrigger>\n            {props.showPrimary && (\n              <Button appearance=\"primary\" className={styles.dialog_apply} onClick={onButtonApplyClick}>\n                Löschen\n              </Button>\n            )}\n          </DialogActions>\n        </DialogBody>\n      </DialogSurface>\n    </Dialog>\n  );\n};\n\nexport default DialogForm;\n","// helper functions & parameters\n\n/* global console fetch */\n\nconst Host = \"https://fg.server.lavel.io\";\n\nexport interface DialogInfo {\n  show: boolean;\n  text: string;\n}\n\nexport interface FieldInfo {\n  current: string;\n  state: \"none\" | \"error\" | \"warning\" | \"success\" | undefined;\n}\n\n// send Request to API\nexport async function sendRequest(\n  endpoint: string,\n  apiKey: string,\n  subject: string,\n  sender: string,\n  body: string,\n  user_input: string,\n  user_email: string,\n  recipients: string[] = [],\n  cc: string[] = [],\n  files?: File[]\n): Promise<any> {\n  var url = Host + endpoint;\n  console.log(` sendRequest to: ${url}`);\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    authorization: apiKey,\n  };\n\n  const data: any = {\n    messages: [\n      {\n        subject: subject,\n        body: body,\n        sender: sender,\n        recipients: recipients,\n        cc: cc,\n        thread_body: body,\n        raw_content: null\n      },\n    ],\n    user_input: user_input,\n    target_language: \"german\",\n    user_email: user_email,\n  };\n\n  // If files are provided, convert them to base64 and add them to the request\n  if (files && files.length > 0) {\n    const filePromises = files.map(async (file) => {\n      const fileBase64 = await fileToBase64(file);\n      return {\n        name: file.name,\n        type: file.type,\n        content: fileBase64,\n      };\n    });\n    \n    const fileData = await Promise.all(filePromises);\n    data.files = fileData;\n  }\n\n  console.log(\"data = \" + JSON.stringify(data, null, 2));\n\n  var options = {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(data),\n    muteHttpExceptions: true,\n  };\n\n  // HTTP request\n  var response = await fetch(url, options);\n\n  if (![200, 400, 401, 404, 502].includes(response.status)) {\n    console.log(`Wrong response code: ${response.status}`);\n    return { detail: `Wrong response code: ${response.status}` };\n  }\n\n  try {\n    let data: any = await response.json();\n    console.log(\"data: \" + JSON.stringify(data, null, 2));\n    return data;\n  } catch (error) {\n    console.log(`Invalid JSON: ${error}`);\n    return { detail: `Invalid JSON: ${error}` };\n  }\n}\n\n// Helper function to convert File to base64\nexport function fileToBase64(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const base64String = reader.result as string;\n      // Remove the data URL prefix (e.g., \"data:application/pdf;base64,\")\n      const base64Content = base64String.split(',')[1];\n      resolve(base64Content);\n    };\n    reader.onerror = error => reject(error);\n  });\n}\n","import * as React from \"react\";\nimport { \n  Button, \n  Dialog, \n  DialogSurface, \n  Field, \n  InfoLabel, \n  Label, \n  LabelProps, \n  Spinner, \n  Textarea, \n  makeStyles,\n  Badge,\n  Text,\n  Divider,\n  Toast,\n  ToastTitle,\n  useToastController,\n  Toaster\n} from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo, FieldInfo, sendRequest } from \"../../../helpers\";\nimport { getMailDetails, insertText } from \"../taskpane\";\nimport { Pencil, FileText, X, Upload, CheckCircle2 } from \"lucide-react\";\n\n/* global console, HTMLTextAreaElement, HTMLDivElement, localStorage, File, fetch */\n\n// API Configuration\nconst BUCKET_NAME = \"fg-chat-ocr\";\nconst OCR_API_ENDPOINT = \"https://fg.server.lavel.io/outlook/ocr-detect\";\nconst PRESIGNED_URL_ENDPOINT = \"https://fg.server.lavel.io/generate_presigned_upload_url\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  answer_dialog: {\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n  dialog_field: {\n    fontWeight: 600,\n    marginBottom: \"15px\",\n  },\n  button_send: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n  spinner: {\n    width: \"75%\",\n  },\n  pencil: {\n    marginLeft: \"2px\",\n    marginRight: \"4px\",\n  },\n  dropZone: {\n    border: \"2px dashed #ccc\",\n    borderRadius: \"4px\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    marginBottom: \"15px\",\n    cursor: \"pointer\",\n    transition: \"all 0.3s ease\",\n  },\n  dropZoneActive: {\n    border: \"2px dashed #0078d4\",\n    backgroundColor: \"rgba(0, 120, 212, 0.05)\",\n  },\n  dropZoneSuccess: {\n    border: \"2px dashed #107c10\",\n    backgroundColor: \"rgba(16, 124, 16, 0.05)\",\n  },\n  filePreview: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"8px 12px\",\n    backgroundColor: \"#f3f2f1\",\n    borderRadius: \"4px\",\n    marginBottom: \"15px\",\n  },\n  fileIcon: {\n    marginRight: \"8px\",\n    color: \"#0078d4\",\n  },\n  fileName: {\n    flex: 1,\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n  },\n  removeButton: {\n    cursor: \"pointer\",\n    color: \"#605e5c\",\n    \"&:hover\": {\n      color: \"#d13438\",\n    },\n  },\n  divider: {\n    margin: \"15px 0\",\n  },\n  fileUploadInfo: {\n    marginBottom: \"10px\",\n    fontSize: \"12px\",\n    color: \"#605e5c\",\n  },\n  ocrCompletedMessage: {\n    color: \"green\",\n    display: \"block\",\n    marginTop: \"5px\",\n  },\n  checkIcon: {\n    verticalAlign: \"middle\",\n    marginRight: \"5px\",\n  },\n  hiddenInput: {\n    display: \"none\",\n  }\n});\n\nconst TabAnswer = () => {\n  const styles = useStyles();\n\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" }); // dialog form\n  const [showSpinner, setShowSpinner] = React.useState<boolean>(false); // spinner\n\n  const [answerValue, setAnswerValue] = React.useState<FieldInfo>({ current: \"\", state: \"none\" }); // answer field value\n  // Text input for OCR results - used to store and display extracted text\n  const [textInput, setTextInput] = React.useState<string>(\"\");\n  const [isDragging, setIsDragging] = React.useState<boolean>(false);\n  const [uploadedFiles, setUploadedFiles] = React.useState<File[]>([]);\n  const [isUploading, setIsUploading] = React.useState<boolean>(false);\n  const [isOcrProcessing, setIsOcrProcessing] = React.useState<boolean>(false);\n  const [ocrCompleted, setOcrCompleted] = React.useState<boolean>(false);\n  // Track file names for OCR processing - used in the processOCR function\n  const [fileNames, setFileNames] = React.useState<string[]>([]);\n\n  const dropZoneRef = React.useRef<HTMLDivElement>(null);\n  const { dispatchToast } = useToastController();\n\n  const def_answer = \"Eingeben..\";\n\n  React.useEffect(() => {\n    const getStartData = async () => {\n      var answer = localStorage.getItem(\"answer\"); // load last answer from storage\n\n      // set default value\n      if (!answer || answer == \"\") {\n        answer = def_answer;\n      }\n\n      setAnswerValue({ current: answer, state: \"none\" });\n    };\n\n    getStartData(); // get Start Data\n  }, []);\n\n  // validate answer field\n  const ValidateField = (): boolean => {\n    let valid = true;\n    var answer = answerValue.current ?? \"\";\n\n    // set default value\n    if (answer == \" \") {\n      answer = def_answer;\n      localStorage.setItem(\"answer\", answer); // save\n    }\n\n    answer = answer.trim();\n\n    if (answer == \"\") {\n      setAnswerValue({ current: answer, state: \"error\" });\n      valid = false;\n    } else {\n      setAnswerValue({ current: answer, state: \"none\" });\n    }\n\n    return valid;\n  };\n\n  // change answer value\n  const handleChangeValue = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = event.target.value;\n    setAnswerValue({ ...answerValue, current: value });\n    setTextInput(value); // Update textInput state as well\n  };\n\n  // Handle file drop events\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const newFiles = Array.from(e.dataTransfer.files);\n      const validFiles = newFiles.filter((file) => file.type === \"application/pdf\");\n      const invalidFiles = newFiles.length - validFiles.length;\n      \n      if (invalidFiles > 0) {\n        setShowDialog({\n          show: true,\n          text: `${invalidFiles} Datei(en) wurden ignoriert. Nur PDF-Dateien werden unterstützt.`,\n        });\n      }\n      \n      if (validFiles.length > 0) {\n        const updatedFiles = [...uploadedFiles, ...validFiles].slice(0, 5);\n        setUploadedFiles(updatedFiles);\n        setOcrCompleted(false);\n        \n        if (uploadedFiles.length + validFiles.length > 5) {\n          setShowDialog({ show: true, text: \"Maximal 5 Dateien können hochgeladen werden.\" });\n        }\n      }\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const newFiles = Array.from(e.target.files);\n      const validFiles = newFiles.filter((file) => file.type === \"application/pdf\");\n      const invalidFiles = newFiles.length - validFiles.length;\n      \n      if (invalidFiles > 0) {\n        setShowDialog({\n          show: true,\n          text: `${invalidFiles} Datei(en) wurden ignoriert. Nur PDF-Dateien werden unterstützt.`,\n        });\n      }\n      \n      if (validFiles.length > 0) {\n        const updatedFiles = [...uploadedFiles, ...validFiles].slice(0, 5);\n        setUploadedFiles(updatedFiles);\n        setOcrCompleted(false);\n        \n        if (uploadedFiles.length + validFiles.length > 5) {\n          setShowDialog({ show: true, text: \"Maximal 5 Dateien können hochgeladen werden.\" });\n        }\n      }\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    const updatedFiles = [...uploadedFiles];\n    updatedFiles.splice(index, 1);\n    setUploadedFiles(updatedFiles);\n    // Reset OCR status if all files are removed\n    if (updatedFiles.length === 0) {\n      setOcrCompleted(false);\n      setFileNames([]);\n    }\n  };\n\n  const triggerFileInput = () => {\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.click();\n    }\n  };\n\n  // Upload files to S3 using presigned URLs and trigger OCR processing\n  const uploadFilesToS3 = async () => {\n    if (uploadedFiles.length === 0) return;\n    \n    setIsUploading(true);\n    setIsOcrProcessing(true);\n    \n    try {\n      // Upload each file to S3 using presigned URLs\n      const newFileNames = [];\n      const newFileUuids = [];\n      const newFileTypes = [];\n      \n      for (const file of uploadedFiles) {\n        // Get presigned URL from the server\n        const presignedUrlResponse = await fetch(PRESIGNED_URL_ENDPOINT, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: localStorage.getItem(\"apiKey\") || \"\"\n          },\n          body: JSON.stringify({\n            filename: file.name,\n            content_type: file.type,\n            bucket_name: BUCKET_NAME,\n          }),\n        });\n        \n        if (!presignedUrlResponse.ok) {\n          throw new Error(`Failed to get presigned URL: ${presignedUrlResponse.statusText}`);\n        }\n        \n        const presignedData = await presignedUrlResponse.json();\n        // Upload file using the presigned URL\n        const uploadResponse = await fetch(presignedData.url, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": file.type,\n          },\n          body: file,\n        });\n        \n        if (!uploadResponse.ok) {\n          throw new Error(`Failed to upload ${file.name}: ${uploadResponse.statusText}`);\n        }\n        \n        // Store the file information returned from the server\n        newFileNames.push(presignedData.filename);\n        newFileUuids.push(presignedData.uuid);\n        newFileTypes.push(presignedData.filetype);\n      }\n      \n      setFileNames(newFileNames);\n      setIsUploading(false);\n      \n      // Trigger OCR processing with the new file information\n      await triggerOcrProcessing(newFileUuids.map((uuid, index) => `${uuid}${newFileTypes[index]}`));\n    } catch (error) {\n      console.error(\"Error uploading files to S3:\", error);\n      setShowDialog({ show: true, text: `Fehler beim Hochladen: ${error.message}` });\n      setIsUploading(false);\n      setIsOcrProcessing(false);\n    }\n  };\n  \n  // Trigger OCR processing on the backend\n  const triggerOcrProcessing = async (fileNames: string[]) => {\n    try {\n      const apiKey: string = localStorage.getItem(\"apiKey\") || \"\";\n      \n      if (apiKey === \"\") {\n        setShowDialog({ show: true, text: \"API-Schlüssel nicht angegeben\" });\n        setIsOcrProcessing(false);\n        return;\n      }\n      \n      // Prepare files array according to OCRRequest schema\n      const files = fileNames.map((filename) => ({\n        filename,\n        bucket: BUCKET_NAME,\n      }));\n      \n      const response = await fetch(OCR_API_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: apiKey,\n        },\n        body: JSON.stringify({\n          files: files,\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.detail || \"OCR processing failed\");\n      }\n      \n      // Update text input with OCR results if available\n      if (data.documents && data.documents.length > 0) {\n        // Combine text from all documents\n        const extractedText = data.documents.map((doc: { text: string }) => doc.text).join(\"\\n\\n\");\n        \n        if (extractedText) {\n          setTextInput((prevText) => {\n            const newText = prevText ? `${prevText}\\n\\n${extractedText}` : extractedText;\n            return newText;\n          });\n        }\n      }\n      \n      setIsOcrProcessing(false);\n      setOcrCompleted(true);\n      \n      // Show success toast\n      dispatchToast(\n        <Toast>\n          <ToastTitle media={<CheckCircle2 color=\"green\" />}>OCR erfolgreich abgeschlossen</ToastTitle>\n        </Toast>,\n        { position: \"top\", timeout: 5000 }\n      );\n      \n    } catch (error) {\n      console.error(\"Error processing OCR:\", error);\n      setShowDialog({ show: true, text: `OCR-Fehler: ${error.message}` });\n      setIsOcrProcessing(false);\n    }\n  };\n\n  // React to file uploads\n  React.useEffect(() => {\n    if (uploadedFiles.length > 0 && !isUploading && !isOcrProcessing && !ocrCompleted) {\n      uploadFilesToS3();\n    }\n  }, [uploadedFiles, isUploading, isOcrProcessing, ocrCompleted]);\n\n  // button - get full answer\n  const onButtonSaveClick = () => {\n    if (!ValidateField()) {\n      return;\n    }\n\n    // Save both answer value and text input\n    localStorage.setItem(\"answer\", answerValue.current); // save\n    setTextInput(answerValue.current); // Ensure textInput is synced\n\n    var apiKey: string = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n\n    if (apiKey == \"\") {\n      setShowDialog({ show: true, text: \"API-Schlüssel nicht angegeben\" });\n      return;\n    }\n    \n    // Check if we need to wait for OCR processing\n    if (uploadedFiles.length > 0 && !ocrCompleted) {\n      setShowDialog({ \n        show: true, \n        text: \"Bitte warten Sie, bis die OCR-Verarbeitung der PDF-Dateien abgeschlossen ist, bevor Sie eine Antwort generieren.\" \n      });\n      return;\n    }\n\n    // get Mail Details\n    getMailDetails((data) => {\n      setShowSpinner(true);\n\n      var user_input: string = answerValue.current;\n\n      console.log(\"subject = \" + data.subject);\n      console.log(\"sender = \" + data.sender);\n      console.log(\"body = \" + data.body);\n      console.log(\"recipients = \" + JSON.stringify(data.recipients));\n      console.log(\"cc = \" + JSON.stringify(data.cc));\n      console.log(\"user_input = \" + user_input);\n      console.log(\"user_email = \" + data.user_email);\n      console.log(\"files = \" + (uploadedFiles.length > 0 ? uploadedFiles.map((f) => f.name).join(\", \") : \"none\"));\n\n      // send Request\n      sendRequest(\n        \"/outlook/generate-email\", \n        apiKey, \n        data.subject, \n        data.sender, \n        data.body, \n        user_input, \n        data.user_email, \n        data.recipients, \n        data.cc,\n        uploadedFiles.length > 0 ? uploadedFiles : undefined\n      )\n        .then(async (response) => {\n          setShowSpinner(false);\n\n          console.log(\"response = \" + JSON.stringify(response, null, 2));\n\n          // show error dialog\n          if (response.status != \"success\") {\n            setShowDialog({ show: true, text: response.detail });\n            return;\n          }\n\n          insertText(response.email_text); // Write text to the cursor point in the compose surface.\n        })\n        .catch((error) => {\n          setShowSpinner(false);\n          setShowDialog({ show: true, text: `Request error: ${error}` }); // show error dialog\n        });\n    });\n  };\n\n  // result dialog event\n  const handleResultDialog = () => {\n    setShowSpinner(false);\n    setShowDialog({ ...showDialog, show: false });\n  };\n\n  return (\n    <div className={styles.root} role=\"tabpanel\" aria-labelledby=\"Settings\">\n      <Toaster />\n      \n      {(showSpinner || isUploading || isOcrProcessing) && (\n        <Dialog defaultOpen={true}>\n          <DialogSurface className={styles.spinner}>\n            <Spinner \n              autoFocus \n              labelPosition=\"after\" \n              label={\n                isUploading\n                  ? \"Dateien werden hochgeladen...\"\n                  : isOcrProcessing\n                    ? \"OCR-Verarbeitung läuft...\"\n                    : \"Loading...\"\n              }\n            />\n          </DialogSurface>\n        </Dialog>\n      )}\n\n      {showDialog.show && (\n        <DialogForm\n          type=\"alert\"\n          title=\"Fehler\"\n          content={showDialog.text}\n          closeName=\"OK\"\n          showPrimary={false}\n          onResultDialog={handleResultDialog}\n        />\n      )}\n\n      <div className={styles.answer_dialog}>\n        <Field\n          className={styles.dialog_field}\n          label={\n            <>\n              <Pencil size={18} className={styles.pencil} /> Nutzer Input\n            </>\n          }\n          validationState={answerValue.state}\n          validationMessage=\"Kurze Antwort eingeben\"\n          required\n        >\n          <Textarea\n            value={answerValue.current}\n            rows={10}\n            placeholder=\"Kurzen Text eingeben..\"\n            size=\"large\"\n            resize=\"vertical\"\n            onChange={handleChangeValue}\n          />\n        </Field>\n\n        <Divider className={styles.divider} />\n\n        <Text className={styles.fileUploadInfo}>\n          Laden Sie bis zu 5 PDF-Dateien hoch, um Text zu extrahieren und in die Anfrage einzubeziehen\n        </Text>\n\n        <div \n          ref={dropZoneRef}\n          className={`${styles.dropZone} ${isDragging ? styles.dropZoneActive : \"\"} ${ocrCompleted ? styles.dropZoneSuccess : \"\"}`}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleDrop}\n          onClick={triggerFileInput}\n        >\n          <Upload size={24} />\n          <p>\n            PDF-Dateien hierher ziehen oder klicken zum Auswählen ({uploadedFiles.length}/5)\n            {ocrCompleted && uploadedFiles.length > 0 && (\n              <span className={styles.ocrCompletedMessage}>\n                <CheckCircle2 size={16} className={styles.checkIcon} />\n                OCR abgeschlossen\n              </span>\n            )}\n          </p>\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            accept=\"application/pdf\"\n            className={styles.hiddenInput}\n            multiple\n            onChange={handleFileSelect}\n            aria-label=\"PDF-Datei auswählen\"\n          />\n        </div>\n        \n        {uploadedFiles.length > 0 && (\n          <div style={{ marginBottom: '15px' }}>\n            {uploadedFiles.map((file, index) => (\n              <div key={index} className={styles.filePreview}>\n                <FileText size={20} className={styles.fileIcon} />\n                <span className={styles.fileName}>{file.name}</span>\n                <X size={18} className={styles.removeButton} onClick={() => handleRemoveFile(index)} />\n              </div>\n            ))}\n          </div>\n        )}\n\n        <Button className={styles.button_send} appearance=\"primary\" onClick={onButtonSaveClick}>\n          Antwort generieren\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TabAnswer;\n","/* global Office console */\n\n// Write text to the cursor point in the compose surface.\nexport async function insertText(text: string) {\n  try {\n    Office.context.mailbox.item?.body.setSelectedDataAsync(\n      text,\n      { coercionType: Office.CoercionType.Text },\n      (asyncResult: Office.AsyncResult<void>) => {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          throw asyncResult.error.message;\n        }\n      }\n    );\n  } catch (error) {\n    console.log(\"Error: \" + error);\n  }\n}\n\n// get Mail Details\nexport async function getMailDetails(\n  callback: (data: { \n    subject: string; \n    sender: string; \n    body: string; \n    user_email: string;\n    recipients: string[];\n    cc: string[];\n  }) => void\n) {\n  console.log(\"getMailDetails\");\n\n  Office.context.mailbox.item.subject.getAsync((subjectResult) => {\n    if (subjectResult.status === Office.AsyncResultStatus.Failed) {\n      console.error(\"Failed to get subject:\", subjectResult.error.message);\n      return;\n    }\n\n    const subject = subjectResult.value;\n\n    Office.context.mailbox.item.from.getAsync((fromResult) => {\n      if (fromResult.status === Office.AsyncResultStatus.Failed) {\n        console.error(\"Failed to get sender:\", fromResult.error.message);\n        return;\n      }\n\n      const sender = fromResult.value.emailAddress;\n      const user_email = sender;\n\n      Office.context.mailbox.item.to.getAsync((toResult) => {\n        if (toResult.status === Office.AsyncResultStatus.Failed) {\n          console.error(\"Failed to get recipients:\", toResult.error.message);\n          return;\n        }\n\n        const recipients = toResult.value.map((recipient) => recipient.emailAddress);\n\n        Office.context.mailbox.item.cc.getAsync((ccResult) => {\n          if (ccResult.status === Office.AsyncResultStatus.Failed) {\n            console.error(\"Failed to get CC:\", ccResult.error.message);\n            return;\n          }\n\n          const cc = ccResult.value.map((recipient) => recipient.emailAddress);\n\n          Office.context.mailbox.item.body.getAsync(Office.CoercionType.Text, (bodyResult) => {\n            if (bodyResult.status === Office.AsyncResultStatus.Failed) {\n              console.error(\"Failed to get body:\", bodyResult.error.message);\n              return;\n            }\n\n            const body = bodyResult.value;\n\n            callback({ subject, sender, body, user_email, recipients, cc });\n          });\n        });\n      });\n    });\n  });\n}\n","import * as React from \"react\";\nimport { Button, Field, Input, makeStyles } from \"@fluentui/react-components\";\nimport DialogForm from \"./DialogForm\";\nimport { DialogInfo, FieldInfo } from \"../../../helpers\";\n\n/* global HTMLInputElement, localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    flexDirection: \"column\",\n    display: \"flex\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n  },\n  saving_dialog: {\n    flexDirection: \"column\",\n    display: \"flex\",\n  },\n  dialog_field: {\n    fontWeight: 600,\n    marginBottom: \"15px\",\n  },\n  dialog_add: {\n    width: \"100%\",\n    marginBottom: \"10px\",\n  },\n});\n\nconst TabSettings = () => {\n  const styles = useStyles();\n\n  const [showDialog, setShowDialog] = React.useState<DialogInfo>({ show: false, text: \"\" }); // dialog form\n  const [keyValue, setKeyValue] = React.useState<FieldInfo>({ current: \"\", state: \"none\" }); // apiKey field value\n\n  React.useEffect(() => {\n    const getStartData = async () => {\n      var apiKey = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n      setKeyValue({ current: apiKey, state: \"none\" });\n    };\n\n    getStartData(); // get Start Data\n  }, []);\n\n  // validate field\n  const ValidateField = (): boolean => {\n    let valid = true;\n    var apiKey = keyValue.current.trim();\n    setKeyValue({ ...keyValue, current: apiKey, state: \"none\" });\n    return valid;\n  };\n\n  // change input value\n  const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setKeyValue({ ...keyValue, current: event.target.value });\n  };\n\n  // button - save api key\n  const onButtonSaveClick = () => {\n    if (!ValidateField()) {\n      return;\n    }\n\n    localStorage.setItem(\"apiKey\", keyValue.current); // save\n\n    setShowDialog({ show: true, text: \"Änderungen gespeichert\" });\n  };\n\n  // result dialog event\n  const handleResultDialog = () => {\n    setShowDialog({ ...showDialog, show: false });\n  };\n\n  return (\n    <div className={styles.root} role=\"tabpanel\" aria-labelledby=\"Settings\">\n      {showDialog.show && (\n        <DialogForm\n          type=\"modal\"\n          title=\"Info\"\n          content={showDialog.text}\n          closeName=\"OK\"\n          showPrimary={false}\n          onResultDialog={handleResultDialog}\n        />\n      )}\n\n      <div className={styles.saving_dialog}>\n        <Field\n          className={styles.dialog_field}\n          label=\"API-Schlüsselwert\"\n          validationState={keyValue.state}\n          validationMessage=\"Kopieren Sie Ihren API-Schlüsselwert und fügen Sie ihn ein\"\n          required\n        >\n          <Input value={keyValue.current} placeholder=\"z.b. outlookapi47eda17f38081e...\" onChange={handleChangeValue} />\n        </Field>\n\n        <Button className={styles.dialog_add} appearance=\"primary\" onClick={onButtonSaveClick}>\n          Speichern\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TabSettings;\n","import * as React from \"react\";\nimport { makeStyles, Tab, TabList } from \"@fluentui/react-components\";\nimport type { SelectTabData, SelectTabEvent, TabValue } from \"@fluentui/react-components\";\nimport TabAnswer from \"./TabAnswer\";\nimport TabSettings from \"./TabSettings\";\n\n\n/* global localStorage */\n\nconst useStyles = makeStyles({\n  root: {\n    alignItems: \"flex-start\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    paddingTop: \"10px\",\n    paddingLeft: \"1px\",\n    paddingRight: \"1px\",\n  },\n  tab_menu: {\n    paddingBottom: \"20px\",\n  },\n  tab_cont: {\n    width: \"100%\",\n  },\n});\n\nexport const TabPanes = () => {\n  const styles = useStyles();\n\n  var apiKey = localStorage.getItem(\"apiKey\"); // load apiKey from storage\n\n  const [selectedTab, setSelectedTab] = React.useState<TabValue>(apiKey == \"\" ? \"settings\" : \"answer\");\n\n  const onTabSelect = (_event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedTab(data.value);\n  };\n\n  return (\n    <div className={styles.root}>\n      <TabList className={styles.tab_menu} selectedValue={selectedTab} onTabSelect={onTabSelect}>\n        <Tab id=\"Answer\" value=\"answer\">\n          Antwort\n        </Tab>\n\n        <Tab id=\"Settings\" value=\"settings\">\n          Einstellungen\n        </Tab>\n      </TabList>\n\n      <div className={styles.tab_cont}>\n        {selectedTab === \"answer\" && <TabAnswer />}\n\n        {selectedTab === \"settings\" && <TabSettings />}\n      </div>\n    </div>\n  );\n};\n\nexport default TabPanes;\n","import * as React from \"react\";\nimport { Divider, makeStyles } from \"@fluentui/react-components\";\nimport { TabPanes } from \"./TabPanes\";\n\n/* global */\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"100vh\",\n    maxWidth: \"370px\",\n  },\n  divider: {\n    marginTop: \"10px\",\n  },\n});\n\nconst App = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <TabPanes />\n      <Divider className={styles.divider} inset />\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./components/App\";\nimport { createLightTheme, FluentProvider } from \"@fluentui/react-components\";\nimport type { BrandVariants, Theme } from \"@fluentui/react-components\";\n\n/* global document, Office, module, require, HTMLElement */\n\n// themes designer: https://react.fluentui.dev/?path=/docs/theme-theme-designer--docs\nconst outlook: BrandVariants = {\n  10: \"#010101\",\n  20: \"#010202\",\n  30: \"#010403\",\n  40: \"#0D1C17\",\n  50: \"#0F2F25\",\n  60: \"#0E3D30\",\n  70: \"#094B3A\",\n  80: \"#005B46\",\n  90: \"#216753\",\n  100: \"#377461\",\n  110: \"#4B816F\",\n  120: \"#5F8E7D\",\n  130: \"#729B8C\",\n  140: \"#85A99C\",\n  150: \"#98B7AB\",\n  160: \"#ACC4BB\",\n};\n\nconst customTheme: Theme = {\n  ...createLightTheme(outlook),\n};\n\nconst rootElement: HTMLElement | null = document.getElementById(\"container\");\nconst root = rootElement ? createRoot(rootElement) : undefined;\n\nOffice.onReady(() => {\n  root?.render(\n    <FluentProvider theme={customTheme}>\n      <App />\n    </FluentProvider>\n  );\n});\n"],"names":["useStyles","dialog","marginTop","marginRight","marginLeft","dialog_apply","backgroundColor","props","styles","Dialog","modalType","type","defaultOpen","onOpenChange","onResultDialog","DialogSurface","className","DialogBody","DialogTitle","title","DialogContent","content","DialogActions","DialogTrigger","disableButtonEnhancement","Button","appearance","autoFocus","closeName","showPrimary","onClick","sendRequest","endpoint","apiKey","subject","sender","body","user_input","user_email","recipients","cc","files","url","headers","authorization","data","messages","thread_body","raw_content","target_language","length","filePromises","map","file","fileBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","base64Content","result","split","onerror","error","fileToBase64","name","fileData","all","options","method","JSON","stringify","muteHttpExceptions","response","fetch","includes","status","detail","json","BUCKET_NAME","root","flexDirection","display","paddingLeft","paddingRight","answer_dialog","dialog_field","fontWeight","marginBottom","button_send","width","spinner","pencil","dropZone","border","borderRadius","padding","textAlign","cursor","transition","dropZoneActive","dropZoneSuccess","filePreview","alignItems","fileIcon","color","fileName","flex","overflow","textOverflow","whiteSpace","removeButton","divider","margin","fileUploadInfo","fontSize","ocrCompletedMessage","checkIcon","verticalAlign","hiddenInput","showDialog","setShowDialog","show","text","showSpinner","setShowSpinner","answerValue","setAnswerValue","current","state","textInput","setTextInput","isDragging","setIsDragging","uploadedFiles","setUploadedFiles","isUploading","setIsUploading","isOcrProcessing","setIsOcrProcessing","ocrCompleted","setOcrCompleted","fileNames","setFileNames","dropZoneRef","dispatchToast","useToastController","def_answer","answer","localStorage","getItem","triggerOcrProcessing","filename","bucket","Authorization","ok","Error","documents","extractedText","doc","join","prevText","Toast","ToastTitle","media","position","timeout","message","newFileNames","newFileUuids","newFileTypes","presignedUrlResponse","content_type","bucket_name","statusText","presignedData","uploadResponse","push","uuid","filetype","index","role","Toaster","Spinner","labelPosition","label","Field","size","validationState","validationMessage","required","Textarea","T","value","rows","placeholder","resize","onChange","event","target","Divider","Text","ref","onDragOver","e","preventDefault","onDragLeave","onDrop","dataTransfer","newFiles","Array","from","validFiles","filter","invalidFiles","updatedFiles","slice","fileInput","document","getElementById","click","id","accept","multiple","style","key","splice","handleRemoveFile","valid","setItem","trim","ValidateField","callback","Office","context","mailbox","item","getAsync","subjectResult","AsyncResultStatus","Failed","fromResult","emailAddress","to","toResult","recipient","ccResult","CoercionType","bodyResult","getMailDetails","then","setSelectedDataAsync","coercionType","asyncResult","insertText","email_text","catch","saving_dialog","dialog_add","keyValue","setKeyValue","Input","justifyContent","paddingTop","tab_menu","paddingBottom","tab_cont","TabPanes","selectedTab","setSelectedTab","TabList","selectedValue","onTabSelect","_event","Tab","minHeight","maxWidth","inset","customTheme","createLightTheme","rootElement","onReady","render","FluentProvider","theme"],"sourceRoot":""}